<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dev-tools_8hpp" kind="file" language="C++">
    <compoundname>dev-tools.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">tuple</includes>
    <includes local="no">array</includes>
    <includedby refid="accelerations_8hpp" local="yes">accelerations.hpp</includedby>
    <includedby refid="own-math_8hpp" local="yes">own-math.hpp</includedby>
    <includedby refid="error-checker_8hpp" local="yes">error-checker.hpp</includedby>
    <includedby refid="_gauss-_dadau_8h" local="yes">integrator/Gauss-Dadau.h</includedby>
    <includedby refid="particle-system_8hpp" local="yes">particle-system.hpp</includedby>
    <includedby refid="post-newtonian_8hpp" local="yes">interaction/post-newtonian.hpp</includedby>
    <includedby refid="tidal_8hpp" local="yes">interaction/tidal.hpp</includedby>
    <includedby refid="lazy__expr_8h" local="yes">lazy-evaluation/lazy_expr.h</includedby>
    <includedby refid="multi-thread_8hpp" local="yes">multi-thread/multi-thread.hpp</includedby>
    <includedby refid="ciostream_8hpp" local="yes">multi-thread/ciostream.hpp</includedby>
    <includedby refid="_i_a_s15_8h" local="yes">ode-iterator/IAS15.h</includedby>
    <includedby refid="particles_8hpp" local="yes">particles.hpp</includedby>
    <includedby refid="simulator_8hpp" local="yes">simulator.hpp</includedby>
    <includedby refid="stepsize-controller_8hpp" local="yes">stepsize-controller.hpp</includedby>
    <includedby refid="config-reader_8hpp" local="yes">tools/config-reader.hpp</includedby>
    <incdepgraph>
      <node id="52">
        <label>dev-tools.hpp</label>
        <link refid="dev-tools_8hpp"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>tuple</label>
      </node>
      <node id="55">
        <label>array</label>
      </node>
      <node id="53">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="76">
        <label>ode-iterator/IAS15.h</label>
        <link refid="_i_a_s15_8h"/>
      </node>
      <node id="75">
        <label>ode-iterator/BS-iterator_bk.hpp</label>
        <link refid="_b_s-iterator__bk_8hpp"/>
      </node>
      <node id="90">
        <label>lazy-evaluation/mkl-array.h</label>
        <link refid="mkl-array_8h"/>
      </node>
      <node id="92">
        <label>multi-thread/ciostream.hpp</label>
        <link refid="ciostream_8hpp"/>
      </node>
      <node id="72">
        <label>orbits/orbits.hpp</label>
        <link refid="orbits_8hpp"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>error-checker/RMS.hpp</label>
        <link refid="_r_m_s_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>interaction/newtonian.hpp</label>
        <link refid="newtonian_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>kahan-number.hpp</label>
        <link refid="kahan-number_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>step-controller/PID-controller.hpp</label>
        <link refid="_p_i_d-controller_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>ode-iterator/const-iterator.hpp</label>
        <link refid="const-iterator_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>particle-system/chain.hpp</label>
        <link refid="chain_8hpp"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>particle-system/archain.hpp</label>
        <link refid="archain_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>lazy-evaluation/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>own-math.hpp</label>
        <link refid="own-math_8hpp"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>simulator.hpp</label>
        <link refid="simulator_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>spaceHub.hpp</label>
        <link refid="space_hub_8hpp"/>
      </node>
      <node id="69">
        <label>particle-system/chain-system.hpp</label>
        <link refid="chain-system_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>integrator/symplectic/symplectic-integrator.hpp</label>
        <link refid="symplectic-integrator_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>tools/config-reader.hpp</label>
        <link refid="config-reader_8hpp"/>
      </node>
      <node id="78">
        <label>error-checker.hpp</label>
        <link refid="error-checker_8hpp"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>particles/finite-size.hpp</label>
        <link refid="finite-size_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>dev-tools.hpp</label>
        <link refid="dev-tools_8hpp"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>lazy-evaluation/lazy_array.h</label>
        <link refid="lazy__array_8h"/>
      </node>
      <node id="58">
        <label>particle-system/regu-system.hpp</label>
        <link refid="regu-system_8hpp"/>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>ode-iterator/Burlish-Stoer.hpp</label>
        <link refid="_burlish-_stoer_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>ode-iterator/BS-iterator0.hpp</label>
        <link refid="_b_s-iterator0_8hpp"/>
      </node>
      <node id="84">
        <label>ode-iterator/ode-iterator.hpp</label>
        <link refid="ode-iterator_8hpp"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>lazy-evaluation/lazy_expr.h</label>
        <link refid="lazy__expr_8h"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>accelerations.hpp</label>
        <link refid="accelerations_8hpp"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>interaction.hpp</label>
        <link refid="interaction_8hpp"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>error-checker/worst-offender.hpp</label>
        <link refid="worst-offender_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>stepsize-controller.hpp</label>
        <link refid="stepsize-controller_8hpp"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>particles.hpp</label>
        <link refid="particles_8hpp"/>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>interaction/post-newtonian.hpp</label>
        <link refid="post-newtonian_8hpp"/>
      </node>
      <node id="61">
        <label>particle-system/base-system.hpp</label>
        <link refid="base-system_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>core-computation.hpp</label>
        <link refid="core-computation_8hpp"/>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>interaction/tidal.hpp</label>
        <link refid="tidal_8hpp"/>
      </node>
      <node id="81">
        <label>integrator/Gauss-Dadau.h</label>
        <link refid="_gauss-_dadau_8h"/>
      </node>
      <node id="91">
        <label>multi-thread/multi-thread.hpp</label>
        <link refid="multi-thread_8hpp"/>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>particles/point-particles.hpp</label>
        <link refid="point-particles_8hpp"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>rand-generator.hpp</label>
        <link refid="rand-generator_8hpp"/>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>particle-system.hpp</label>
        <link refid="particle-system_8hpp"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classspace_1_1_empty" prot="public">space::Empty</innerclass>
    <innerclass refid="structspace_1_1get__value__type" prot="public">space::get_value_type</innerclass>
    <innerclass refid="structspace_1_1is__indexable" prot="public">space::is_indexable</innerclass>
    <innerclass refid="structspace_1_1is__reservable" prot="public">space::is_reservable</innerclass>
    <innerclass refid="structspace_1_1is__container" prot="public">space::is_container</innerclass>
    <innerclass refid="structspace_1_1is__container__helper" prot="public">space::is_container_helper</innerclass>
    <innerclass refid="structspace_1_1is__container_3_01_t_00_01std_1_1conditional__t_3_01false_00_01is__container__helcfd49663b99169f905a0b919fe8283f9" prot="public">space::is_container&lt; T, std::conditional_t&lt; false, is_container_helper&lt; typename T::value_type, typename T::size_type, typename T::iterator, typename T::const_iterator, decltype(std::declval&lt; T &gt;().size()), decltype(std::declval&lt; T &gt;().begin()), decltype(std::declval&lt; T &gt;().end()) &gt;, void &gt; &gt;</innerclass>
    <innernamespace refid="namespacespace">space</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="dev-tools_8hpp_1ae4334217b14191738cf54d7b89e42b00" prot="public" static="no">
        <name>CRTP_IMPL</name>
        <initializer>friend Base; protected</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="141" column="9" bodyfile="dev-tools.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1acdfe40b6293bb934c6e9b3a8e3446647" prot="public" static="no">
        <name>MACRO_CAT</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1a73b71c9cec23232564276263c3c36b67" kindref="member">MACRO_CAT_I</ref>(A, B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="143" column="9" bodyfile="dev-tools.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a73b71c9cec23232564276263c3c36b67" prot="public" static="no">
        <name>MACRO_CAT_I</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1ac0633fcb84d102fae11cf1915d380ae4" kindref="member">MACRO_CAT_II</ref>(~, A ## B)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="144" column="9" bodyfile="dev-tools.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac0633fcb84d102fae11cf1915d380ae4" prot="public" static="no">
        <name>MACRO_CAT_II</name>
        <param><defname>P</defname></param>
        <param><defname>REST</defname></param>
        <initializer>REST</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="145" column="9" bodyfile="dev-tools.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1addeaa2230f7e557c339dd2a7a37d62f2" prot="public" static="no">
        <name>UNIQ</name>
        <param><defname>BASE</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1acdfe40b6293bb934c6e9b3a8e3446647" kindref="member">MACRO_CAT</ref>(BASE, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="146" column="9" bodyfile="dev-tools.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a7e3ba13a65ca1eb893e8a01d8e89d570" prot="public" static="no">
        <name>PACK</name>
        <param><defname>...</defname></param>
        <initializer>std::forward_as_tuple(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="148" column="9" bodyfile="dev-tools.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1afa143f3d190b8ed8cdfd048cb74f99ee" prot="public" static="no">
        <name>DEBUG_MODE</name>
        <param><defname>BLOCK</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="153" column="10" bodyfile="dev-tools.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a58c80f7d71aa5555df912ee9d60d34ea" prot="public" static="no">
        <name>DEBUG_MSG</name>
        <param><defname>EXPR</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Macros used to output debuf info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="160" column="10" bodyfile="dev-tools.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1abf836016ac652bb5c932fe102c48301e" prot="public" static="no">
        <name>DEBUG_MODE_ASSERT</name>
        <param><defname>EXPR</defname></param>
        <param><defname>MSG</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="166" column="10" bodyfile="dev-tools.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a3102a3792f55f3ad5ff10f5fe3a6ce79" prot="public" static="no">
        <name>EXPR</name>
        <initializer>, X, CONTAINER)                                                                                          \
  [&amp;](){ using Type = std::remove_reference_v&lt;decltype(CONTAINER)&gt;; Type result;                                       \
  if constexpr(is_reservable&lt;Type&gt;::value){                                                                            \
    result.reserve(CONTAINER.size())                                                                                   \
  }                                                                                                                    \
  std::transform(std::begin(CONTAINER), std::end(CONTAINER), std::back_inserter(result), [](auto&amp; X) { return EXPR; });\
  return result;}()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="169" column="9" bodyfile="dev-tools.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac2bdf3bcd9a8848f9533cb143fea0a3a" prot="public" static="no">
        <name>SPACEHUB_MAKE_CONSTRUCTORS</name>
        <param><defname>CLASS</defname></param>
        <param><defname>ATTR1</defname></param>
        <param><defname>ATTR2</defname></param>
        <param><defname>ATTR3</defname></param>
        <param><defname>ATTR4</defname></param>
        <param><defname>ATTR5</defname></param>
        <initializer>/** Default constructor. */                                                                                            \
    CLASS() = ATTR1;                                                                                                   \
/** Default copy constructor. */                                                                                       \
    CLASS(CLASS const&amp;) = ATTR2;                                                                                       \
/** Default move constructor */                                                                                        \
    CLASS(CLASS &amp;&amp;) = ATTR3;                                                                                           \
/** Default copy assignment operator */                                                                                \
    CLASS &amp;operator=(CLASS const &amp;) = ATTR4;                                                                           \
/** Default move assignment operator */                                                                                \
    CLASS &amp;operator=(CLASS &amp;&amp;) = ATTR5;                                                                                \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="177" column="9" bodyfile="dev-tools.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a0f585cf51c90e87b303299d7e5901c62" prot="public" static="no">
        <name>SPACEHUB_USING_TYPE_SYSTEM_OF</name>
        <param><defname>CLASS</defname></param>
        <initializer>template&lt;typename ..._T_&gt;                                                                                          \
    using Container   = typename CLASS::template Container&lt;_T_...&gt;;                                                    \
                                                                                                                       \
    using Scalar      = typename CLASS::Scalar;                                                                        \
    using ScalarArray = typename CLASS::ScalarArray;                                                                   \
    using IdxArray    = typename CLASS::IdxArray;                                                                      \
    using IntArray    = typename CLASS::IntArray;                                                                      \
    using Vector      = typename CLASS::Vector;                                                                        \
    using VectorArray = typename CLASS::VectorArray;                                                                   \
    using Coord       = typename CLASS::Coord</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="189" column="9" bodyfile="dev-tools.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ae057e45edf56a31a4859f89e6bba2100" prot="public" static="no">
        <name>DECLARE_CRTP_ACCESSOR</name>
        <param><defname>DERIVED</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <initializer>/**@must_impl The setter interface of member `NAME`. */                                                                \
inline TYPE &amp; NAME () noexcept {                                                                                       \
    return static_cast&lt;Derived*&gt;(this)-&gt;impl_##NAME();                                                                 \
};                                                                                                                     \
/**@must_impl The getter interface of member `NAME`. */                                                                \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return static_cast&lt;Derived const*&gt;(this)-&gt;impl_##NAME();                                                           \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="201" column="9" bodyfile="dev-tools.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a681c127002bf82b9b09dbd0545db1646" prot="public" static="no">
        <name>DECLARE_CRTP_READ_ACCESSOR</name>
        <param><defname>DERIVED</defname></param>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <initializer>/**@must_impl The getter interface of member `NAME`. */                                                                \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return static_cast&lt;Derived*&gt;(this)-&gt;impl_##NAME();                                                                 \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="211" column="9" bodyfile="dev-tools.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a7048ff21fd022abe7a131342f2fed10d" prot="public" static="no">
        <name>SPACEHUB_STD_ACCESSOR</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>/** The setter interface of member `MEMBER` in name of `NAME`.*/                                                       \
inline TYPE &amp; NAME () noexcept {                                                                                       \
    return MEMBER;                                                                                                     \
};                                                                                                                     \
/** The getter interface of member `MEMBER` in name of `NAME`.*/                                                       \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return MEMBER;                                                                                                     \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="217" column="9" bodyfile="dev-tools.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a6e8dcb3772ed46afbe5b83c269336181" prot="public" static="no">
        <name>SPACEHUB_READ_ACCESSOR</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>MEMBER</defname></param>
        <initializer>/** The getter interface of member `MEMBER` in name of `NAME`. */                                                                            \
inline TYPE const &amp; NAME () const noexcept {                                                                           \
    return MEMBER;                                                                                                     \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="227" column="9" bodyfile="dev-tools.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a043ac749777107d34e02197c9942ac3d" prot="public" static="no">
        <name>CREATE_METHOD_CHECK</name>
        <param><defname>NAME</defname></param>
        <initializer>template&lt;typename T, typename... Args&gt;                                                                             \
    struct has_method_##NAME                                                                                           \
    {                                                                                                                  \
        template&lt;typename U&gt;                                                                                           \
        constexpr static auto check(const void*)                                                                       \
        -&gt;decltype(std::declval&lt;U&gt;().NAME(std::declval&lt;Args&gt;()...), std::true_type());                                 \
                                                                                                                       \
        template&lt;typename U&gt;                                                                                           \
        constexpr static std::false_type check(...);                                                                   \
                                                                                                                       \
        static constexpr bool value = decltype(check&lt;T&gt;(nullptr))::value;                                              \
    };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="233" column="9" bodyfile="dev-tools.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a01123b58bcb865a870641e5f30ce8ed2" prot="public" static="no">
        <name>HAS_METHOD</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>has_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="247" column="9" bodyfile="dev-tools.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a002df30e7890bdb68e3693ca94c9e684" prot="public" static="no">
        <name>CREATE_PROTECTED_METHOD_CHECK</name>
        <param><defname>NAME</defname></param>
        <initializer>template&lt;typename T, typename... Args&gt;                                                                             \
    struct has_protected_method_##NAME : public T                                                                      \
    {                                                                                                                  \
        template&lt;typename U&gt;                                                                                           \
        constexpr static auto check(const void*)                                                                       \
        -&gt;decltype(std::declval&lt;has_protected_method_##NAME&lt;U, Args...&gt; &gt;().NAME(std::declval&lt;Args&gt;()...), std::true_type());\
                                                                                                                       \
        template&lt;typename U&gt;                                                                                           \
        constexpr static std::false_type check(...);                                                                   \
                                                                                                                       \
        static constexpr bool value = decltype(check&lt;T&gt;(nullptr))::value;                                              \
    };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="250" column="9" bodyfile="dev-tools.hpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a1c72db210bcf48a1b855a5e83e78e840" prot="public" static="no">
        <name>HAS_PROTECTED_METHOD</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>has_protected_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="264" column="9" bodyfile="dev-tools.hpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a4250abbdfc25337cd0dca29f9b55ff47" prot="public" static="no">
        <name>CREATE_CRTP_IMPLEMENTATION_CHECK</name>
        <param><defname>NAME</defname></param>
        <initializer><ref refid="dev-tools_8hpp_1a002df30e7890bdb68e3693ca94c9e684" kindref="member">CREATE_PROTECTED_METHOD_CHECK</ref>(impl_##NAME) <ref refid="dev-tools_8hpp_1a043ac749777107d34e02197c9942ac3d" kindref="member">CREATE_METHOD_CHECK</ref>(NAME)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="266" column="9" bodyfile="dev-tools.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a71c2a282f291770b45b3f1cef8c19f75" prot="public" static="no">
        <name>HAS_CRTP_IMPLEMENTATION</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>has_protected_method_impl_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value &amp;&amp; has_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="268" column="9" bodyfile="dev-tools.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a86408b2e79be508b3c8b8c90f66e89a7" prot="public" static="no">
        <name>CREATE_MEMBER_CHECK</name>
        <param><defname>MEMBER</defname></param>
        <initializer>template&lt;typename T, typename V = bool&gt;                                                                            \
    struct has_ ## MEMBER : std::false_type { };                                                                       \
                                                                                                                       \
    template&lt;typename T&gt;                                                                                               \
    struct has_ ## MEMBER                                                                                              \
    &lt;                                                                                                                  \
        T,                                                                                                             \
        typename std::enable_if                                                                                        \
        &lt;                                                                                                              \
            !std::is_same&lt;decltype(std::declval&lt;T&gt;().MEMBER), void&gt;::value, bool                                       \
        &gt;::type                                                                                                        \
    &gt;: std::true_type { };</initializer>
        <briefdescription>
<para>Macros used to check if a class has a member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="271" column="9" bodyfile="dev-tools.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a4e050f8974fcc0ca3e7ecfee0558f4f2" prot="public" static="no">
        <name>HAS_MEMBER</name>
        <param><defname>C</defname></param>
        <param><defname>member</defname></param>
        <initializer>has_ ## member&lt;C&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="285" column="9" bodyfile="dev-tools.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1acd50abf2f60a8ebc7dcc2a94bda2d7ca" prot="public" static="no">
        <name>CREATE_STATIC_MEMBER_CHECK</name>
        <param><defname>MEMBER</defname></param>
        <initializer>\
    template&lt;typename T, typename V = bool&gt;                                                                            \
    struct has_static ## MEMBER : std::false_type { };                                                                 \
                                                                                                                       \
    template&lt;typename T&gt;                                                                                               \
    struct has_static ## MEMBER                                                                                        \
    &lt;                                                                                                                  \
        T,                                                                                                             \
        typename std::enable_if                                                                                        \
        &lt;                                                                                                              \
            !std::is_same&lt;decltype(T::MEMBER), void&gt;::value, bool                                                      \
        &gt;::type                                                                                                        \
    &gt;: std::true_type { };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macros used to check if a class has a static member. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="288" column="9" bodyfile="dev-tools.hpp" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a53374bd759b4f29eaec7c33870b03da5" prot="public" static="no">
        <name>HAS_STATIC_MEMBER</name>
        <param><defname>C</defname></param>
        <param><defname>member</defname></param>
        <initializer>has_static ## member&lt;C&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="303" column="9" bodyfile="dev-tools.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac2fd4f3ea0b555c107cad2c9430717f8" prot="public" static="no">
        <name>CHECK_METHOD</name>
        <param><defname>CLASS</defname></param>
        <param><defname>METHOD</defname></param>
        <param><defname>...</defname></param>
        <initializer>\
            static_assert(has_method_##METHOD&lt;CLASS, ##__VA_ARGS__&gt;::value,                                            \
            &quot;Template argument &apos;&quot; # CLASS  &quot;&apos; must have method &apos;&quot;  # METHOD  &quot;(&quot;  #__VA_ARGS__  &quot;)&apos;. &quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if a class has a specific method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="306" column="9" bodyfile="dev-tools.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a3004813da8a05abadaad077b5cacbc6f" prot="public" static="no">
        <name>CHECK_MEMBER</name>
        <param><defname>CLASS</defname></param>
        <param><defname>MB</defname></param>
        <initializer>static_assert(has_ ## MB&lt;C&gt;::value,                                                                        \
            &quot;Template argument &apos;&quot; # CLASS  &quot;&apos; must have member &apos;&quot;  # MB  &quot;&apos;. &quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if a class has a member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="312" column="9" bodyfile="dev-tools.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ac10c0f62e719b8f64c36b62dfacfbd82" prot="public" static="no">
        <name>CHECK_STATIC_MEMBER</name>
        <param><defname>CLASS</defname></param>
        <param><defname>MB</defname></param>
        <initializer>\
            static_assert(has_static ## MB&lt;CLASS&gt;::value,                                                              \
            &quot;Template argument &apos;&quot; # CLASS  &quot;&apos; must have static member &apos;&quot;  # MB  &quot;&apos;. &quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if a class has a static member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="317" column="9" bodyfile="dev-tools.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a9165bf60ffe95b57b3a1deb24f92b7f7" prot="public" static="no">
        <name>CHECK_TYPE</name>
        <param><defname>T1</defname></param>
        <param><defname>T2</defname></param>
        <initializer>static_assert(std::is_same&lt; typename T1::Types, typename T2::Types&gt;::value,                                \
            &quot;Template argument &apos;&quot; #T1 &quot;&apos; and &apos;&quot; #T2 &quot;&apos; must have the same type of the type member(space::ProtoType&lt;...&gt;)&quot;);</initializer>
        <briefdescription>
<para>Macros used to static_assert if two class have the same base type set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="323" column="9" bodyfile="dev-tools.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1ad76c4399904c876b0fde01a7edbaf093" prot="public" static="no">
        <name>CHECK_POD</name>
        <param><defname>DATA</defname></param>
        <initializer>static_assert(std::is_trivial&lt;DATA&gt;::value, &quot;Template arg &apos;&quot; #DATA &quot;&apos; must be a POD type!&quot;);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="328" column="9" bodyfile="dev-tools.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a8a3f3c65b4167fb7188576cfa5e2ca44" prot="public" static="no">
        <name>IS_BASE_OF</name>
        <param><defname>BASE</defname></param>
        <param><defname>DERIVED</defname></param>
        <initializer>(std::is_base_of&lt;BASE, DERIVED&gt;::value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="397" column="9" bodyfile="dev-tools.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dev-tools_8hpp_1a16d2c5a0818a4356eb912b06c8b0a0e3" prot="public" static="no">
        <name>TYPE_OF_SELF</name>
        <initializer>std::remove_reference&lt;decltype(*this)&gt;::type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="dev-tools.hpp" line="399" column="9" bodyfile="dev-tools.hpp" bodystart="399" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Header file. </para>    </detaileddescription>
    <location file="dev-tools.hpp"/>
  </compounddef>
</doxygen>
