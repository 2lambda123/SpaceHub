<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classspace_1_1multi_thread_1_1_concurrent_file" kind="class" language="C++" prot="public">
    <compoundname>space::multiThread::ConcurrentFile</compoundname>
    <includes refid="multi-thread_8hpp" local="no">multi-thread.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classspace_1_1multi_thread_1_1_concurrent_file_1a1c6a2b7e9b59bd9c31a2e3c22a4c820b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::fstream &gt;</type>
        <definition>std::shared_ptr&lt;std::fstream&gt; space::multiThread::ConcurrentFile::file_</definition>
        <argsstring></argsstring>
        <name>file_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="109" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classspace_1_1multi_thread_1_1_concurrent_file_1acde41820b68bb693422c7f913a56ea60" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::mutex &gt;</type>
        <definition>std::shared_ptr&lt;std::mutex&gt; space::multiThread::ConcurrentFile::mutex_</definition>
        <argsstring></argsstring>
        <name>mutex_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="110" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classspace_1_1multi_thread_1_1_concurrent_file_1a3a3d0062fa2fa134ced4833200b098c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::multiThread::ConcurrentFile::ConcurrentFile</definition>
        <argsstring>(const char *file_name, std::ios_base::openmode mode)</argsstring>
        <name>ConcurrentFile</name>
        <param>
          <type>const char *</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="66" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi_thread_1_1_concurrent_file_1aaf395220e1b6d6c9e43294ccd92bbd2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::multiThread::ConcurrentFile::ConcurrentFile</definition>
        <argsstring>(const std::string &amp;file_name, std::ios_base::openmode mode)</argsstring>
        <name>ConcurrentFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="73" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="73" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi_thread_1_1_concurrent_file_1a4bf3e75dcc4f732100b893c1a6701793" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callback</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::multiThread::ConcurrentFile::execute</definition>
        <argsstring>(Callback &amp;&amp;func, Args &amp;&amp;...args)</argsstring>
        <name>execute</name>
        <param>
          <type>Callback &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="77" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi_thread_1_1_concurrent_file_1a4a261ac14ef0f7826f026be96df7f6c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void space::multiThread::ConcurrentFile::flush</definition>
        <argsstring>()</argsstring>
        <name>flush</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="82" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1multi_thread_1_1_concurrent_file_1a47ec83871fb6bfc9cde525cda3d0ca9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool space::multiThread::ConcurrentFile::eof</definition>
        <argsstring>()</argsstring>
        <name>eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="87" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="87" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classspace_1_1multi_thread_1_1_concurrent_file_1a4ff8182dffe89350438ef9aedc33ade0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend <ref refid="classspace_1_1multi_thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref> &amp;</type>
        <definition>ConcurrentFile&amp; operator&lt;&lt;</definition>
        <argsstring>(ConcurrentFile &amp;os, U &amp;&amp;tup)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classspace_1_1multi_thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="93" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="friend" id="classspace_1_1multi_thread_1_1_concurrent_file_1a989ac6f685c3d26fb0e66c800d194644" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;&gt;</definition>
        <argsstring>(ConcurrentFile &amp;is, U &amp;tup)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classspace_1_1multi_thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>U &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="100" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="100" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="60">
        <label>space::multiThread::ConcurrentFile</label>
        <link refid="classspace_1_1multi_thread_1_1_concurrent_file"/>
      </node>
    </collaborationgraph>
    <location file="multi-thread/multi-thread.hpp" line="64" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="64" bodyend="111"/>
    <listofallmembers>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a3a3d0062fa2fa134ced4833200b098c7" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>ConcurrentFile</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1aaf395220e1b6d6c9e43294ccd92bbd2d" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>ConcurrentFile</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a47ec83871fb6bfc9cde525cda3d0ca9f" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>eof</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a4bf3e75dcc4f732100b893c1a6701793" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>execute</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a1c6a2b7e9b59bd9c31a2e3c22a4c820b" prot="private" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>file_</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a4a261ac14ef0f7826f026be96df7f6c5" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>flush</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1acde41820b68bb693422c7f913a56ea60" prot="private" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>mutex_</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a4ff8182dffe89350438ef9aedc33ade0" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>operator&lt;&lt;</name></member>
      <member refid="classspace_1_1multi_thread_1_1_concurrent_file_1a989ac6f685c3d26fb0e66c800d194644" prot="public" virt="non-virtual"><scope>space::multiThread::ConcurrentFile</scope><name>operator&gt;&gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
