<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacespace_1_1multi_thread" kind="namespace" language="C++">
    <compoundname>space::multiThread</compoundname>
    <innerclass refid="classspace_1_1multi_thread_1_1_cistream" prot="public">space::multiThread::Cistream</innerclass>
    <innerclass refid="classspace_1_1multi_thread_1_1_concurrent_deque" prot="public">space::multiThread::ConcurrentDeque</innerclass>
    <innerclass refid="classspace_1_1multi_thread_1_1_concurrent_file" prot="public">space::multiThread::ConcurrentFile</innerclass>
    <innerclass refid="classspace_1_1multi_thread_1_1_costream" prot="public">space::multiThread::Costream</innerclass>
    <innerclass refid="classspace_1_1multi_thread_1_1_ipip" prot="public">space::multiThread::Ipip</innerclass>
    <innerclass refid="classspace_1_1multi_thread_1_1_opip" prot="public">space::multiThread::Opip</innerclass>
    <innerclass refid="classspace_1_1multi_thread_1_1_thread_pool" prot="public">space::multiThread::ThreadPool</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacespace_1_1multi_thread_1aa3b09051ab5b830534b0aac25869a95f" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t space::multiThread::auto_thread</definition>
        <argsstring></argsstring>
        <name>auto_thread</name>
        <initializer>= (std::thread::hardware_concurrency() &gt; 1) ? std::thread::hardware_concurrency() : 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="22" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacespace_1_1multi_thread_1ae75c85134749f3d5a0b4cc1fe693ab99" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t space::multiThread::machine_thread_num</definition>
        <argsstring></argsstring>
        <name>machine_thread_num</name>
        <initializer>= (std::thread::hardware_concurrency() &gt; 1) ? std::thread::hardware_concurrency() : 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="24" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacespace_1_1multi_thread_1af6493e43bcb2e2105245546ede571dd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::multiThread::multi_threads_loop</definition>
        <argsstring>(size_t total_len, size_t thread_num, Lambda &amp;&amp;task)</argsstring>
        <name>multi_threads_loop</name>
        <param>
          <type>size_t</type>
          <declname>total_len</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>thread_num</declname>
        </param>
        <param>
          <type>Lambda &amp;&amp;</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="27" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="27" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1multi_thread_1a7c2380e468c16bba70fce92cae55d2cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::multiThread::multi_thread_run</definition>
        <argsstring>(size_t thread_num, Callable &amp;&amp;job, Args &amp;&amp;...args)</argsstring>
        <name>multi_thread_run</name>
        <param>
          <type>size_t</type>
          <declname>thread_num</declname>
        </param>
        <param>
          <type>Callable &amp;&amp;</type>
          <declname>job</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="46" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="46" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1multi_thread_1a55562dd560725d1e9d7407181ec770be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::multiThread::auto_multi_thread</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>auto_multi_thread</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="60" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1multi_thread_1ac70c8b812d85907b7d67030ec0241f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classspace_1_1multi_thread_1_1_concurrent_file" kindref="compound">ConcurrentFile</ref></type>
        <definition>ConcurrentFile space::multiThread::make_thread_safe_fstream</definition>
        <argsstring>(std::string const &amp;name, std::ios_base::openmode mode)</argsstring>
        <name>make_thread_safe_fstream</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::ios_base::openmode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="multi-thread/multi-thread.hpp" line="113" column="1" bodyfile="multi-thread/multi-thread.hpp" bodystart="113" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Documentation for Foo here. More docs for Foo here, and down here. </para>    </detaileddescription>
    <location file="multi-thread/ciostream.hpp" line="12" column="1"/>
  </compounddef>
</doxygen>
