<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structspace_1_1_types" kind="struct" language="C++" prot="public">
    <compoundname>space::Types</compoundname>
    <includes refid="type-class_8hpp" local="no">type-class.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Real</type>
      </param>
      <param>
        <type>template&lt; class... &gt; class</type>
        <declname>TContainer</declname>
        <defname>TContainer</defname>
        <defval>std::vector</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structspace_1_1_types_1aef9bf10a6cda409d88bd4b721ae206d3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>TContainer&lt; T... &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::Container =  TContainer&lt;T...&gt;</definition>
        <argsstring></argsstring>
        <name>Container</name>
        <briefdescription>
<para>Generic container. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>variadic template parameters that compatible to various containers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="25" column="5" bodyfile="type-class.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1aa153db52d77d1848ae930fa41411b3d3" prot="public" static="no">
        <type>Real</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::Scalar =  Real</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="27" column="5" bodyfile="type-class.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1ad155d339411e1df6e6831a4a561abf17" prot="public" static="no">
        <type><ref refid="structspace_1_1_types_1aef9bf10a6cda409d88bd4b721ae206d3" kindref="member">Container</ref>&lt; Scalar &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::ScalarArray =  Container&lt;Scalar&gt;</definition>
        <argsstring></argsstring>
        <name>ScalarArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="28" column="5" bodyfile="type-class.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1a74e013af93d6cf750faea20dd29fc197" prot="public" static="no">
        <type><ref refid="structspace_1_1_types_1aef9bf10a6cda409d88bd4b721ae206d3" kindref="member">Container</ref>&lt; int &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::IntArray =  Container&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>IntArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="29" column="5" bodyfile="type-class.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1a7e74ccbdf0fc0e85d11b7b5947408732" prot="public" static="no">
        <type><ref refid="structspace_1_1_types_1aef9bf10a6cda409d88bd4b721ae206d3" kindref="member">Container</ref>&lt; size_t &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::IdxArray =  Container&lt;size_t&gt;</definition>
        <argsstring></argsstring>
        <name>IdxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="30" column="5" bodyfile="type-class.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1ae871a5e6e1d4f92c979dc51b67644ca8" prot="public" static="no">
        <type><ref refid="structspace_1_1_vec3" kindref="compound">Vec3</ref>&lt; Scalar &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::Vector =  Vec3&lt;Scalar&gt;</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="31" column="5" bodyfile="type-class.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1a7da4a9267d13662f1e32489752537689" prot="public" static="no">
        <type><ref refid="structspace_1_1_types_1aef9bf10a6cda409d88bd4b721ae206d3" kindref="member">Container</ref>&lt; <ref refid="structspace_1_1_vec3" kindref="compound">Vector</ref> &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::VectorArray =  Container&lt;Vector&gt;</definition>
        <argsstring></argsstring>
        <name>VectorArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="32" column="5" bodyfile="type-class.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1_types_1a92ab981bb0ac9ba49ffb6ae5506d21fc" prot="public" static="no">
        <type><ref refid="structspace_1_1_coords" kindref="compound">Coords</ref>&lt; ScalarArray &gt;</type>
        <definition>using space::Types&lt; Real, TContainer &gt;::Coord =  Coords&lt;ScalarArray&gt;</definition>
        <argsstring></argsstring>
        <name>Coord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="type-class.hpp" line="33" column="5" bodyfile="type-class.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Type system that is used across the whole spacehub system. This type class provide all basic type i.e &apos;Scalar&apos;, &apos;Vector&apos;, &apos;ScalarArray&apos;, &apos;Coord&apos; and etc,. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Real</parametername>
</parameternamelist>
<parameterdescription>
<para>The basic scalar type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TContainer</parametername>
</parameternamelist>
<parameterdescription>
<para>The container type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="type-class.hpp" line="17" column="14" bodyfile="type-class.hpp" bodystart="17" bodyend="34"/>
    <listofallmembers>
      <member refid="structspace_1_1_types_1aef9bf10a6cda409d88bd4b721ae206d3" prot="public" virt="non-virtual"><scope>space::Types</scope><name>Container</name></member>
      <member refid="structspace_1_1_types_1a92ab981bb0ac9ba49ffb6ae5506d21fc" prot="public" virt="non-virtual"><scope>space::Types</scope><name>Coord</name></member>
      <member refid="structspace_1_1_types_1a7e74ccbdf0fc0e85d11b7b5947408732" prot="public" virt="non-virtual"><scope>space::Types</scope><name>IdxArray</name></member>
      <member refid="structspace_1_1_types_1a74e013af93d6cf750faea20dd29fc197" prot="public" virt="non-virtual"><scope>space::Types</scope><name>IntArray</name></member>
      <member refid="structspace_1_1_types_1aa153db52d77d1848ae930fa41411b3d3" prot="public" virt="non-virtual"><scope>space::Types</scope><name>Scalar</name></member>
      <member refid="structspace_1_1_types_1ad155d339411e1df6e6831a4a561abf17" prot="public" virt="non-virtual"><scope>space::Types</scope><name>ScalarArray</name></member>
      <member refid="structspace_1_1_types_1ae871a5e6e1d4f92c979dc51b67644ca8" prot="public" virt="non-virtual"><scope>space::Types</scope><name>Vector</name></member>
      <member refid="structspace_1_1_types_1a7da4a9267d13662f1e32489752537689" prot="public" virt="non-virtual"><scope>space::Types</scope><name>VectorArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
