<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classspace_1_1_chain" kind="class" language="C++" prot="public">
    <compoundname>space::Chain</compoundname>
    <innerclass refid="structspace_1_1_chain_1_1_node" prot="public">space::Chain::Node</innerclass>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classspace_1_1_chain_1aba4c65e72d4505d19850f0a94b7ca875" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool space::Chain::auto_centre_of_mass_move_</definition>
        <argsstring></argsstring>
        <name>auto_centre_of_mass_move_</name>
        <initializer>{true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="77" column="27" bodyfile="particle-system/chain.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classspace_1_1_chain_1ae570df3513d4daecd23b54ca4548f07c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::Chain::Chain</definition>
        <argsstring>()=default</argsstring>
        <name>Chain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="23" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1aae885fbe1f31d0d903995ee96c2294c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::Chain::Chain</definition>
        <argsstring>(Chain const &amp;)=default</argsstring>
        <name>Chain</name>
        <param>
          <type><ref refid="classspace_1_1_chain" kindref="compound">Chain</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy constructor. <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="23" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1ade5f7ba028ee32b540cd62e32800de61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>space::Chain::Chain</definition>
        <argsstring>(Chain &amp;&amp;)=default</argsstring>
        <name>Chain</name>
        <param>
          <type><ref refid="classspace_1_1_chain" kindref="compound">Chain</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default move constructor <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="23" column="60"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1aba865aabd5f1b0dbddcad4aa26c80e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classspace_1_1_chain" kindref="compound">Chain</ref> &amp;</type>
        <definition>Chain&amp; space::Chain::operator=</definition>
        <argsstring>(Chain const &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classspace_1_1_chain" kindref="compound">Chain</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default copy assignment operator <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="23" column="94"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a3397dd1dc4dab782cada71b2272d70a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classspace_1_1_chain" kindref="compound">Chain</ref> &amp;</type>
        <definition>Chain&amp; space::Chain::operator=</definition>
        <argsstring>(Chain &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classspace_1_1_chain" kindref="compound">Chain</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default move assignment operator <linebreak/>
 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="23" column="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classspace_1_1_chain_1a4f44ee0689a33aa23882156b984be73d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Coord</type>
          </param>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::calc_chain_index</definition>
        <argsstring>(Coord const &amp;pos, IdxArray &amp;index)</argsstring>
        <name>calc_chain_index</name>
        <param>
          <type>Coord const &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>IdxArray &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="26" column="17" bodyfile="particle-system/chain.hpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a8be57fe30008ac3a24578f34367ef978" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Coord</type>
          </param>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::update_chain</definition>
        <argsstring>(Coord &amp;chain, IdxArray const &amp;idx, IdxArray const &amp;new_idx)</argsstring>
        <name>update_chain</name>
        <param>
          <type>Coord &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>IdxArray const &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>IdxArray const &amp;</type>
          <declname>new_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="34" column="17" bodyfile="particle-system/chain.hpp" bodystart="34" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1aedc972ea5d90f1f2e2f95c139a0dd5a4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarArray</type>
          </param>
          <param>
            <type>typename Coord</type>
          </param>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::calc_cartesian</definition>
        <argsstring>(ScalarArray const &amp;mass, Coord const &amp;chain, Coord &amp;cartesian, IdxArray const &amp;index)</argsstring>
        <name>calc_cartesian</name>
        <param>
          <type>ScalarArray const &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>Coord const &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>Coord &amp;</type>
          <declname>cartesian</declname>
        </param>
        <param>
          <type>IdxArray const &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="60" column="17" bodyfile="particle-system/chain.hpp" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a7c4fa4fd9fa9375ff206f46a9cb1c0d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Coord</type>
          </param>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::calc_chain</definition>
        <argsstring>(Coord const &amp;cartesian, Coord &amp;chain, IdxArray const &amp;index)</argsstring>
        <name>calc_chain</name>
        <param>
          <type>Coord const &amp;</type>
          <declname>cartesian</declname>
        </param>
        <param>
          <type>Coord &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>IdxArray const &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="70" column="17" bodyfile="particle-system/chain.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classspace_1_1_chain_1ae00ca48bf0cc335d3e5b386f9768f32f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool space::Chain::not_in_list</definition>
        <argsstring>(std::list&lt; T &gt; &amp;list, T var)</argsstring>
        <name>not_in_list</name>
        <param>
          <type>std::list&lt; T &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>T</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="80" column="17" bodyfile="particle-system/chain.hpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a7467e134dbc8bad1156de81212ced941" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InsertOpt</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool space::Chain::try_insert</definition>
        <argsstring>(std::list&lt; size_t &gt; &amp;list, size_t &amp;chain_end, Node &amp;n, size_t idx, InsertOpt insert)</argsstring>
        <name>try_insert</name>
        <param>
          <type>std::list&lt; size_t &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>chain_end</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1_chain_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>InsertOpt</type>
          <declname>insert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="85" column="17" bodyfile="particle-system/chain.hpp" bodystart="85" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1acb107f1d075808d4271ab23d47fa8bea" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool space::Chain::try_add_to_chain</definition>
        <argsstring>(std::list&lt; size_t &gt; &amp;list, size_t &amp;head, size_t &amp;tail, Node &amp;n)</argsstring>
        <name>try_add_to_chain</name>
        <param>
          <type>std::list&lt; size_t &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>head</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>tail</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1_chain_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="96" column="17" bodyfile="particle-system/chain.hpp" bodystart="96" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1ac8bc24b492e66b368f451a530d604a9f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Coord</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::create_distances_array</definition>
        <argsstring>(Coord const &amp;pos, Container &amp;vec)</argsstring>
        <name>create_distances_array</name>
        <param>
          <type>Coord const &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Container &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="110" column="17" bodyfile="particle-system/chain.hpp" bodystart="110" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a06065990580d5ce0c021251f1d16badb" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::create_index_from_dist_array</definition>
        <argsstring>(std::vector&lt; Node &gt; &amp;dist, IdxArray &amp;idx, size_t num)</argsstring>
        <name>create_index_from_dist_array</name>
        <param>
          <type>std::vector&lt; <ref refid="structspace_1_1_chain_1_1_node" kindref="compound">Node</ref> &gt; &amp;</type>
          <declname>dist</declname>
        </param>
        <param>
          <type>IdxArray &amp;</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="124" column="17" bodyfile="particle-system/chain.hpp" bodystart="124" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a9b951383bf5553f4443ec69f58e53bce" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Coord</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>static auto space::Chain::get_new_node</definition>
        <argsstring>(Coord const &amp;chain, size_t head, size_t tail) -&gt; typename Coord::Vector</argsstring>
        <name>get_new_node</name>
        <param>
          <type>Coord const &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>head</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="154" column="17" bodyfile="particle-system/chain.hpp" bodystart="154" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a5056f223cadd6c52178bf3aee514af63" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Array</type>
          </param>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::to_chain</definition>
        <argsstring>(Array const &amp;cartesian, Array &amp;chain, IdxArray const &amp;index)</argsstring>
        <name>to_chain</name>
        <param>
          <type>Array const &amp;</type>
          <declname>cartesian</declname>
        </param>
        <param>
          <type>Array &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>IdxArray const &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="179" column="17" bodyfile="particle-system/chain.hpp" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classspace_1_1_chain_1a83c87541ba09eb6cdf611f88ae47ffd3" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Array</type>
          </param>
          <param>
            <type>typename IdxArray</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void space::Chain::to_cartesian</definition>
        <argsstring>(Array const &amp;chain, Array &amp;cartesian, IdxArray const &amp;index)</argsstring>
        <name>to_cartesian</name>
        <param>
          <type>Array const &amp;</type>
          <declname>chain</declname>
        </param>
        <param>
          <type>Array &amp;</type>
          <declname>cartesian</declname>
        </param>
        <param>
          <type>IdxArray const &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="particle-system/chain.hpp" line="191" column="17" bodyfile="particle-system/chain.hpp" bodystart="191" bodyend="200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="particle-system/chain.hpp" line="13" column="14" bodyfile="particle-system/chain.hpp" bodystart="13" bodyend="201"/>
    <listofallmembers>
      <member refid="classspace_1_1_chain_1aba4c65e72d4505d19850f0a94b7ca875" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>auto_centre_of_mass_move_</name></member>
      <member refid="classspace_1_1_chain_1aedc972ea5d90f1f2e2f95c139a0dd5a4" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>calc_cartesian</name></member>
      <member refid="classspace_1_1_chain_1a7c4fa4fd9fa9375ff206f46a9cb1c0d3" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>calc_chain</name></member>
      <member refid="classspace_1_1_chain_1a4f44ee0689a33aa23882156b984be73d" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>calc_chain_index</name></member>
      <member refid="classspace_1_1_chain_1ae570df3513d4daecd23b54ca4548f07c" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>Chain</name></member>
      <member refid="classspace_1_1_chain_1aae885fbe1f31d0d903995ee96c2294c5" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>Chain</name></member>
      <member refid="classspace_1_1_chain_1ade5f7ba028ee32b540cd62e32800de61" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>Chain</name></member>
      <member refid="classspace_1_1_chain_1ac8bc24b492e66b368f451a530d604a9f" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>create_distances_array</name></member>
      <member refid="classspace_1_1_chain_1a06065990580d5ce0c021251f1d16badb" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>create_index_from_dist_array</name></member>
      <member refid="classspace_1_1_chain_1a9b951383bf5553f4443ec69f58e53bce" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>get_new_node</name></member>
      <member refid="classspace_1_1_chain_1ae00ca48bf0cc335d3e5b386f9768f32f" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>not_in_list</name></member>
      <member refid="classspace_1_1_chain_1aba865aabd5f1b0dbddcad4aa26c80e24" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>operator=</name></member>
      <member refid="classspace_1_1_chain_1a3397dd1dc4dab782cada71b2272d70a1" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>operator=</name></member>
      <member refid="classspace_1_1_chain_1a83c87541ba09eb6cdf611f88ae47ffd3" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>to_cartesian</name></member>
      <member refid="classspace_1_1_chain_1a5056f223cadd6c52178bf3aee514af63" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>to_chain</name></member>
      <member refid="classspace_1_1_chain_1acb107f1d075808d4271ab23d47fa8bea" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>try_add_to_chain</name></member>
      <member refid="classspace_1_1_chain_1a7467e134dbc8bad1156de81212ced941" prot="private" virt="non-virtual"><scope>space::Chain</scope><name>try_insert</name></member>
      <member refid="classspace_1_1_chain_1a8be57fe30008ac3a24578f34367ef978" prot="public" virt="non-virtual"><scope>space::Chain</scope><name>update_chain</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
