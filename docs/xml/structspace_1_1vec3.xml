<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="structspace_1_1vec3" kind="struct" language="C++" prot="public">
    <compoundname>space::vec3</compoundname>
    <includes refid="vector3f_8h" local="no">vector3f.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structspace_1_1vec3_1a1fe804bab41b812241c4fb23aa6e4362" prot="public" static="no">
        <type>T</type>
        <definition>using space::vec3&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="13" column="3" bodyfile="vector/vector3f.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1vec3_1a1fe804bab41b812241c4fb23aa6e4362" prot="public" static="no">
        <type>T</type>
        <definition>using space::vec3&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="13" column="3" bodyfile="vector/vector3ld.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structspace_1_1vec3_1a1fe804bab41b812241c4fb23aa6e4362" prot="public" static="no">
        <type>T</type>
        <definition>using space::vec3&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="13" column="3" bodyfile="vector/vector3pf.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structspace_1_1vec3_1a7cad49e6cc773c5dc27e116eca3ebf48" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="16" column="5" bodyfile="vector/vector3f.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structspace_1_1vec3_1aa7a537b6e6fe9837f30340db963851ae" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::y</definition>
        <argsstring></argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="17" column="5" bodyfile="vector/vector3f.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structspace_1_1vec3_1aabd6cf23fc975cad7091400148ab9bd9" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::z</definition>
        <argsstring></argsstring>
        <name>z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="18" column="5" bodyfile="vector/vector3f.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structspace_1_1vec3_1abff63f0e46f72872cde6ef76c7d23987" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>()</argsstring>
        <name>vec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="20" column="3" bodyfile="vector/vector3f.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3a75245d69de37517118e14ca25fcedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>(T vx, T vy, T vz)</argsstring>
        <name>vec3</name>
        <param>
          <type>T</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="21" column="3" bodyfile="vector/vector3f.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a241b2b1b61ba5744ece12b0d0120b0a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>vec3</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="22" column="3" bodyfile="vector/vector3f.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1abb1c9284e116a52b5283b8626406bec5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator+</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Addition by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="24" column="15" bodyfile="vector/vector3f.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a1dbc37c3e553c222f64282041bd54ceb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Subtraction by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="26" column="15" bodyfile="vector/vector3f.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1af153265c79cab6ac077143339f6527d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator*</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Product by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="28" column="15" bodyfile="vector/vector3f.h" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aedaf078335791935603beaf91bc00738" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator/</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Divition by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="30" column="15" bodyfile="vector/vector3f.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a63d3432b1039fd82ab346be6ad507399" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator+</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Add scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="32" column="15" bodyfile="vector/vector3f.h" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1ae028ba5159da9beeb797d8be875eba32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Subtract scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="34" column="15" bodyfile="vector/vector3f.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3faa8e40c3049772a1278cc30999e3f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator*</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Multiply scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="36" column="15" bodyfile="vector/vector3f.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1adef26e4b1df6b66f1c4841d5b6a6f53b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator/</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Divide scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="38" column="15" bodyfile="vector/vector3f.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aff77e8d020494fbb0dc9a9dad416c06b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Opposite vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="40" column="15" bodyfile="vector/vector3f.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3fda08b74e86c640cbd40def9b8ef6be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Absolute value by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="42" column="15" bodyfile="vector/vector3f.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a251fc2b82caee22ff9ba4b0ed1e7dd51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator+=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="43" column="21" bodyfile="vector/vector3f.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a28ca6393d8aa683d5184c0304c71c67e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator-=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="47" column="21" bodyfile="vector/vector3f.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a9e9953e5c0ed2b9198439f5b2b093286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator/=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="51" column="21" bodyfile="vector/vector3f.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a0593020b4c2fc92e2a23a43ff4d91170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator+=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="55" column="21" bodyfile="vector/vector3f.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a0e2f07639de2d4987cba1e10690f8a46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator-=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="59" column="21" bodyfile="vector/vector3f.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a057697b8a9d7b964724467a4611280cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator*=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="63" column="21" bodyfile="vector/vector3f.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a48fb178f68b0908886d939643a5ca9a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator/=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="67" column="21" bodyfile="vector/vector3f.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aabddb2575735a95a387eda185c404cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="71" column="21" bodyfile="vector/vector3f.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aa9129aa5d54a4b810c0cb12d99e4c774" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Calculate the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="76" column="12" bodyfile="vector/vector3f.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a87c11509121e27285c638e9dbdba5813" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::norm2</definition>
        <argsstring>() const</argsstring>
        <name>norm2</name>
        <briefdescription>
<para>Calculate the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="78" column="12" bodyfile="vector/vector3f.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aab8274e4a2b8099b913755c3cd515082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::max_component</definition>
        <argsstring>()</argsstring>
        <name>max_component</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="80" column="12" bodyfile="vector/vector3f.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a8341929b135c150114f3b350ab8166e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::reNorm</definition>
        <argsstring>() const</argsstring>
        <name>reNorm</name>
        <briefdescription>
<para>Calculate the inverse of the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="86" column="12" bodyfile="vector/vector3f.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a8a0e7859adeb355118305d4a3a60251c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void space::vec3&lt; T &gt;::setZero</definition>
        <argsstring>()</argsstring>
        <name>setZero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="87" column="15" bodyfile="vector/vector3f.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1abff63f0e46f72872cde6ef76c7d23987" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>()</argsstring>
        <name>vec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="20" column="3" bodyfile="vector/vector3ld.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3a75245d69de37517118e14ca25fcedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>(T vx, T vy, T vz)</argsstring>
        <name>vec3</name>
        <param>
          <type>T</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="21" column="3" bodyfile="vector/vector3ld.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a241b2b1b61ba5744ece12b0d0120b0a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>vec3</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="22" column="3" bodyfile="vector/vector3ld.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1abb1c9284e116a52b5283b8626406bec5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator+</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Addition by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="24" column="15" bodyfile="vector/vector3ld.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a1dbc37c3e553c222f64282041bd54ceb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Subtraction by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="26" column="15" bodyfile="vector/vector3ld.h" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1af153265c79cab6ac077143339f6527d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator*</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Product by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="28" column="15" bodyfile="vector/vector3ld.h" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aedaf078335791935603beaf91bc00738" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator/</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Divition by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="30" column="15" bodyfile="vector/vector3ld.h" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a63d3432b1039fd82ab346be6ad507399" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator+</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Add scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="32" column="15" bodyfile="vector/vector3ld.h" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1ae028ba5159da9beeb797d8be875eba32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Subtract scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="34" column="15" bodyfile="vector/vector3ld.h" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3faa8e40c3049772a1278cc30999e3f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator*</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Multiply scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="36" column="15" bodyfile="vector/vector3ld.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1adef26e4b1df6b66f1c4841d5b6a6f53b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator/</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Divide scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="38" column="15" bodyfile="vector/vector3ld.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aff77e8d020494fbb0dc9a9dad416c06b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Opposite vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="40" column="15" bodyfile="vector/vector3ld.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3fda08b74e86c640cbd40def9b8ef6be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Absolute value by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="42" column="15" bodyfile="vector/vector3ld.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a251fc2b82caee22ff9ba4b0ed1e7dd51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator+=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="43" column="21" bodyfile="vector/vector3ld.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a28ca6393d8aa683d5184c0304c71c67e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator-=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="47" column="21" bodyfile="vector/vector3ld.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a9e9953e5c0ed2b9198439f5b2b093286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator/=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="51" column="21" bodyfile="vector/vector3ld.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a0593020b4c2fc92e2a23a43ff4d91170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator+=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="55" column="21" bodyfile="vector/vector3ld.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a0e2f07639de2d4987cba1e10690f8a46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator-=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="59" column="21" bodyfile="vector/vector3ld.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a057697b8a9d7b964724467a4611280cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator*=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="63" column="21" bodyfile="vector/vector3ld.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a48fb178f68b0908886d939643a5ca9a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator/=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="67" column="21" bodyfile="vector/vector3ld.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aabddb2575735a95a387eda185c404cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="71" column="21" bodyfile="vector/vector3ld.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aa9129aa5d54a4b810c0cb12d99e4c774" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Calculate the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="76" column="12" bodyfile="vector/vector3ld.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a87c11509121e27285c638e9dbdba5813" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::norm2</definition>
        <argsstring>() const</argsstring>
        <name>norm2</name>
        <briefdescription>
<para>Calculate the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="78" column="12" bodyfile="vector/vector3ld.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aab8274e4a2b8099b913755c3cd515082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::max_component</definition>
        <argsstring>()</argsstring>
        <name>max_component</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="80" column="12" bodyfile="vector/vector3ld.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a8341929b135c150114f3b350ab8166e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::reNorm</definition>
        <argsstring>() const</argsstring>
        <name>reNorm</name>
        <briefdescription>
<para>Calculate the inverse of the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="86" column="12" bodyfile="vector/vector3ld.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a8a0e7859adeb355118305d4a3a60251c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void space::vec3&lt; T &gt;::setZero</definition>
        <argsstring>()</argsstring>
        <name>setZero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="87" column="15" bodyfile="vector/vector3ld.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1abff63f0e46f72872cde6ef76c7d23987" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>()</argsstring>
        <name>vec3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="20" column="3" bodyfile="vector/vector3pf.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3a75245d69de37517118e14ca25fcedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>(T vx, T vy, T vz)</argsstring>
        <name>vec3</name>
        <param>
          <type>T</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>vz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="22" column="3" bodyfile="vector/vector3pf.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a241b2b1b61ba5744ece12b0d0120b0a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>space::vec3&lt; T &gt;::vec3</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>vec3</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="24" column="3" bodyfile="vector/vector3pf.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1abb1c9284e116a52b5283b8626406bec5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator+</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Addition by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="27" column="15" bodyfile="vector/vector3pf.h" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a1dbc37c3e553c222f64282041bd54ceb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Subtraction by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="29" column="15" bodyfile="vector/vector3pf.h" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1af153265c79cab6ac077143339f6527d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator*</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Product by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="31" column="15" bodyfile="vector/vector3pf.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aedaf078335791935603beaf91bc00738" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator/</definition>
        <argsstring>(const vec3 &amp;v) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Divition by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="33" column="15" bodyfile="vector/vector3pf.h" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a63d3432b1039fd82ab346be6ad507399" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator+</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Add scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="35" column="15" bodyfile="vector/vector3pf.h" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1ae028ba5159da9beeb797d8be875eba32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Subtract scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="37" column="15" bodyfile="vector/vector3pf.h" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3faa8e40c3049772a1278cc30999e3f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator*</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Multiply scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="39" column="15" bodyfile="vector/vector3pf.h" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1adef26e4b1df6b66f1c4841d5b6a6f53b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator/</definition>
        <argsstring>(const T c) const</argsstring>
        <name>operator/</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Divide scalar by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="41" column="15" bodyfile="vector/vector3pf.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aff77e8d020494fbb0dc9a9dad416c06b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Opposite vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="43" column="15" bodyfile="vector/vector3pf.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a3fda08b74e86c640cbd40def9b8ef6be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 space::vec3&lt; T &gt;::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
<para>Absolute value by wise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="45" column="15" bodyfile="vector/vector3pf.h" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a251fc2b82caee22ff9ba4b0ed1e7dd51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator+=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="46" column="21" bodyfile="vector/vector3pf.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a28ca6393d8aa683d5184c0304c71c67e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator-=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="50" column="21" bodyfile="vector/vector3pf.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a9e9953e5c0ed2b9198439f5b2b093286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator/=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="54" column="21" bodyfile="vector/vector3pf.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a0593020b4c2fc92e2a23a43ff4d91170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator+=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="58" column="21" bodyfile="vector/vector3pf.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a0e2f07639de2d4987cba1e10690f8a46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator-=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="62" column="21" bodyfile="vector/vector3pf.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a057697b8a9d7b964724467a4611280cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator*=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="66" column="21" bodyfile="vector/vector3pf.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a48fb178f68b0908886d939643a5ca9a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator/=</definition>
        <argsstring>(const T c)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="70" column="21" bodyfile="vector/vector3pf.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aabddb2575735a95a387eda185c404cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
        <definition>const vec3&amp; space::vec3&lt; T &gt;::operator=</definition>
        <argsstring>(const vec3 &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="74" column="21" bodyfile="vector/vector3pf.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aa9129aa5d54a4b810c0cb12d99e4c774" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <briefdescription>
<para>Calculate the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="79" column="12" bodyfile="vector/vector3pf.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a87c11509121e27285c638e9dbdba5813" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::norm2</definition>
        <argsstring>() const</argsstring>
        <name>norm2</name>
        <briefdescription>
<para>Calculate the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="81" column="12" bodyfile="vector/vector3pf.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1aab8274e4a2b8099b913755c3cd515082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::max_component</definition>
        <argsstring>()</argsstring>
        <name>max_component</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="82" column="12" bodyfile="vector/vector3pf.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a8341929b135c150114f3b350ab8166e2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T space::vec3&lt; T &gt;::reNorm</definition>
        <argsstring>() const</argsstring>
        <name>reNorm</name>
        <briefdescription>
<para>Calculate the inverse of the norm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="87" column="12" bodyfile="vector/vector3pf.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structspace_1_1vec3_1a8a0e7859adeb355118305d4a3a60251c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void space::vec3&lt; T &gt;::setZero</definition>
        <argsstring>()</argsstring>
        <name>setZero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="88" column="15" bodyfile="vector/vector3pf.h" bodystart="88" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structspace_1_1vec3_1a04165a00cae4ce5d2f5e142cc177a720" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator+</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="88" column="15" bodyfile="vector/vector3f.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a6252e85a538cca25b99107166be778b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator-</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="89" column="15" bodyfile="vector/vector3f.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a4f0b2685679a321b6c43a7406719c3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator*</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="90" column="15" bodyfile="vector/vector3f.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1af5e1bcad9d3d484d6f4e6b3f8949f5cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;output, const vec3 &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output to ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="92" column="10" bodyfile="vector/vector3f.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a72f92578884bd68e0747871acd8545fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;input, vec3 &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Input from istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3f.h" line="97" column="23" bodyfile="vector/vector3f.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a04165a00cae4ce5d2f5e142cc177a720" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator+</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="88" column="15" bodyfile="vector/vector3ld.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a6252e85a538cca25b99107166be778b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator-</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="89" column="15" bodyfile="vector/vector3ld.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a4f0b2685679a321b6c43a7406719c3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator*</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="90" column="15" bodyfile="vector/vector3ld.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1af5e1bcad9d3d484d6f4e6b3f8949f5cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;output, const vec3 &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output to ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="92" column="10" bodyfile="vector/vector3ld.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a72f92578884bd68e0747871acd8545fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;input, vec3 &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Input from istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3ld.h" line="97" column="23" bodyfile="vector/vector3ld.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a04165a00cae4ce5d2f5e142cc177a720" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator+</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="89" column="15" bodyfile="vector/vector3pf.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a6252e85a538cca25b99107166be778b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator-</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="90" column="15" bodyfile="vector/vector3pf.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a4f0b2685679a321b6c43a7406719c3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref></type>
        <definition>vec3 operator*</definition>
        <argsstring>(const T c, const vec3 &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="91" column="15" bodyfile="vector/vector3pf.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1af5e1bcad9d3d484d6f4e6b3f8949f5cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;output, const vec3 &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output to ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="93" column="10" bodyfile="vector/vector3pf.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="friend" id="structspace_1_1vec3_1a72f92578884bd68e0747871acd8545fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;input, vec3 &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1vec3" kindref="compound">vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Input from istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vector/vector3pf.h" line="98" column="23" bodyfile="vector/vector3pf.h" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Self 3D vector class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>space::vec3&lt; T &gt;</label>
        <link refid="structspace_1_1vec3"/>
        <childnode refid="2" relation="usage">
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
          <edgelabel>z</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="vector/vector3f.h" line="10" column="11" bodyfile="vector/vector3f.h" bodystart="10" bodyend="101"/>
    <listofallmembers>
      <member refid="structspace_1_1vec3_1a3fda08b74e86c640cbd40def9b8ef6be" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>abs</name></member>
      <member refid="structspace_1_1vec3_1a3fda08b74e86c640cbd40def9b8ef6be" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>abs</name></member>
      <member refid="structspace_1_1vec3_1a3fda08b74e86c640cbd40def9b8ef6be" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>abs</name></member>
      <member refid="structspace_1_1vec3_1aab8274e4a2b8099b913755c3cd515082" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>max_component</name></member>
      <member refid="structspace_1_1vec3_1aab8274e4a2b8099b913755c3cd515082" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>max_component</name></member>
      <member refid="structspace_1_1vec3_1aab8274e4a2b8099b913755c3cd515082" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>max_component</name></member>
      <member refid="structspace_1_1vec3_1aa9129aa5d54a4b810c0cb12d99e4c774" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>norm</name></member>
      <member refid="structspace_1_1vec3_1aa9129aa5d54a4b810c0cb12d99e4c774" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>norm</name></member>
      <member refid="structspace_1_1vec3_1aa9129aa5d54a4b810c0cb12d99e4c774" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>norm</name></member>
      <member refid="structspace_1_1vec3_1a87c11509121e27285c638e9dbdba5813" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>norm2</name></member>
      <member refid="structspace_1_1vec3_1a87c11509121e27285c638e9dbdba5813" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>norm2</name></member>
      <member refid="structspace_1_1vec3_1a87c11509121e27285c638e9dbdba5813" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>norm2</name></member>
      <member refid="structspace_1_1vec3_1af153265c79cab6ac077143339f6527d5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a3faa8e40c3049772a1278cc30999e3f7" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a4f0b2685679a321b6c43a7406719c3a5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1af153265c79cab6ac077143339f6527d5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a3faa8e40c3049772a1278cc30999e3f7" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a4f0b2685679a321b6c43a7406719c3a5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1af153265c79cab6ac077143339f6527d5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a3faa8e40c3049772a1278cc30999e3f7" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a4f0b2685679a321b6c43a7406719c3a5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*</name></member>
      <member refid="structspace_1_1vec3_1a057697b8a9d7b964724467a4611280cc" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*=</name></member>
      <member refid="structspace_1_1vec3_1a057697b8a9d7b964724467a4611280cc" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*=</name></member>
      <member refid="structspace_1_1vec3_1a057697b8a9d7b964724467a4611280cc" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator*=</name></member>
      <member refid="structspace_1_1vec3_1abb1c9284e116a52b5283b8626406bec5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a63d3432b1039fd82ab346be6ad507399" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a04165a00cae4ce5d2f5e142cc177a720" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1abb1c9284e116a52b5283b8626406bec5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a63d3432b1039fd82ab346be6ad507399" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a04165a00cae4ce5d2f5e142cc177a720" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1abb1c9284e116a52b5283b8626406bec5" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a63d3432b1039fd82ab346be6ad507399" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a04165a00cae4ce5d2f5e142cc177a720" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+</name></member>
      <member refid="structspace_1_1vec3_1a251fc2b82caee22ff9ba4b0ed1e7dd51" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+=</name></member>
      <member refid="structspace_1_1vec3_1a0593020b4c2fc92e2a23a43ff4d91170" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+=</name></member>
      <member refid="structspace_1_1vec3_1a251fc2b82caee22ff9ba4b0ed1e7dd51" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+=</name></member>
      <member refid="structspace_1_1vec3_1a0593020b4c2fc92e2a23a43ff4d91170" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+=</name></member>
      <member refid="structspace_1_1vec3_1a251fc2b82caee22ff9ba4b0ed1e7dd51" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+=</name></member>
      <member refid="structspace_1_1vec3_1a0593020b4c2fc92e2a23a43ff4d91170" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator+=</name></member>
      <member refid="structspace_1_1vec3_1a1dbc37c3e553c222f64282041bd54ceb" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1ae028ba5159da9beeb797d8be875eba32" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1aff77e8d020494fbb0dc9a9dad416c06b" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1a6252e85a538cca25b99107166be778b1" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1a1dbc37c3e553c222f64282041bd54ceb" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1ae028ba5159da9beeb797d8be875eba32" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1aff77e8d020494fbb0dc9a9dad416c06b" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1a6252e85a538cca25b99107166be778b1" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1a1dbc37c3e553c222f64282041bd54ceb" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1ae028ba5159da9beeb797d8be875eba32" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1aff77e8d020494fbb0dc9a9dad416c06b" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1a6252e85a538cca25b99107166be778b1" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-</name></member>
      <member refid="structspace_1_1vec3_1a28ca6393d8aa683d5184c0304c71c67e" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-=</name></member>
      <member refid="structspace_1_1vec3_1a0e2f07639de2d4987cba1e10690f8a46" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-=</name></member>
      <member refid="structspace_1_1vec3_1a28ca6393d8aa683d5184c0304c71c67e" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-=</name></member>
      <member refid="structspace_1_1vec3_1a0e2f07639de2d4987cba1e10690f8a46" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-=</name></member>
      <member refid="structspace_1_1vec3_1a28ca6393d8aa683d5184c0304c71c67e" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-=</name></member>
      <member refid="structspace_1_1vec3_1a0e2f07639de2d4987cba1e10690f8a46" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator-=</name></member>
      <member refid="structspace_1_1vec3_1aedaf078335791935603beaf91bc00738" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/</name></member>
      <member refid="structspace_1_1vec3_1adef26e4b1df6b66f1c4841d5b6a6f53b" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/</name></member>
      <member refid="structspace_1_1vec3_1aedaf078335791935603beaf91bc00738" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/</name></member>
      <member refid="structspace_1_1vec3_1adef26e4b1df6b66f1c4841d5b6a6f53b" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/</name></member>
      <member refid="structspace_1_1vec3_1aedaf078335791935603beaf91bc00738" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/</name></member>
      <member refid="structspace_1_1vec3_1adef26e4b1df6b66f1c4841d5b6a6f53b" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/</name></member>
      <member refid="structspace_1_1vec3_1a9e9953e5c0ed2b9198439f5b2b093286" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/=</name></member>
      <member refid="structspace_1_1vec3_1a48fb178f68b0908886d939643a5ca9a2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/=</name></member>
      <member refid="structspace_1_1vec3_1a9e9953e5c0ed2b9198439f5b2b093286" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/=</name></member>
      <member refid="structspace_1_1vec3_1a48fb178f68b0908886d939643a5ca9a2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/=</name></member>
      <member refid="structspace_1_1vec3_1a9e9953e5c0ed2b9198439f5b2b093286" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/=</name></member>
      <member refid="structspace_1_1vec3_1a48fb178f68b0908886d939643a5ca9a2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator/=</name></member>
      <member refid="structspace_1_1vec3_1af5e1bcad9d3d484d6f4e6b3f8949f5cf" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator&lt;&lt;</name></member>
      <member refid="structspace_1_1vec3_1af5e1bcad9d3d484d6f4e6b3f8949f5cf" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator&lt;&lt;</name></member>
      <member refid="structspace_1_1vec3_1af5e1bcad9d3d484d6f4e6b3f8949f5cf" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator&lt;&lt;</name></member>
      <member refid="structspace_1_1vec3_1aabddb2575735a95a387eda185c404cf2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator=</name></member>
      <member refid="structspace_1_1vec3_1aabddb2575735a95a387eda185c404cf2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator=</name></member>
      <member refid="structspace_1_1vec3_1aabddb2575735a95a387eda185c404cf2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator=</name></member>
      <member refid="structspace_1_1vec3_1a72f92578884bd68e0747871acd8545fd" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator&gt;&gt;</name></member>
      <member refid="structspace_1_1vec3_1a72f92578884bd68e0747871acd8545fd" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator&gt;&gt;</name></member>
      <member refid="structspace_1_1vec3_1a72f92578884bd68e0747871acd8545fd" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>operator&gt;&gt;</name></member>
      <member refid="structspace_1_1vec3_1a8341929b135c150114f3b350ab8166e2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>reNorm</name></member>
      <member refid="structspace_1_1vec3_1a8341929b135c150114f3b350ab8166e2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>reNorm</name></member>
      <member refid="structspace_1_1vec3_1a8341929b135c150114f3b350ab8166e2" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>reNorm</name></member>
      <member refid="structspace_1_1vec3_1a8a0e7859adeb355118305d4a3a60251c" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>setZero</name></member>
      <member refid="structspace_1_1vec3_1a8a0e7859adeb355118305d4a3a60251c" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>setZero</name></member>
      <member refid="structspace_1_1vec3_1a8a0e7859adeb355118305d4a3a60251c" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>setZero</name></member>
      <member refid="structspace_1_1vec3_1a1fe804bab41b812241c4fb23aa6e4362" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>value_type</name></member>
      <member refid="structspace_1_1vec3_1a1fe804bab41b812241c4fb23aa6e4362" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>value_type</name></member>
      <member refid="structspace_1_1vec3_1a1fe804bab41b812241c4fb23aa6e4362" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>value_type</name></member>
      <member refid="structspace_1_1vec3_1abff63f0e46f72872cde6ef76c7d23987" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a3a75245d69de37517118e14ca25fcedb" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a241b2b1b61ba5744ece12b0d0120b0a4" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1abff63f0e46f72872cde6ef76c7d23987" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a3a75245d69de37517118e14ca25fcedb" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a241b2b1b61ba5744ece12b0d0120b0a4" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1abff63f0e46f72872cde6ef76c7d23987" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a3a75245d69de37517118e14ca25fcedb" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a241b2b1b61ba5744ece12b0d0120b0a4" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>vec3</name></member>
      <member refid="structspace_1_1vec3_1a7cad49e6cc773c5dc27e116eca3ebf48" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>x</name></member>
      <member refid="structspace_1_1vec3_1aa7a537b6e6fe9837f30340db963851ae" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>y</name></member>
      <member refid="structspace_1_1vec3_1aabd6cf23fc975cad7091400148ab9bd9" prot="public" virt="non-virtual"><scope>space::vec3</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
