<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="lazy__expr_8h" kind="file" language="C++">
    <compoundname>lazy_expr.h</compoundname>
    <includes refid="dev-tools_8hpp" local="yes">../dev-tools.hpp</includes>
    <includes local="no">cmath</includes>
    <includedby refid="lazy__array_8h" local="yes">lazy-evaluation/lazy_array.h</includedby>
    <includedby refid="slice_8h" local="yes">lazy-evaluation/slice.h</includedby>
    <includedby refid="mkl-array_8h" local="yes">lazy-evaluation/mkl-array.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>../dev-tools.hpp</label>
        <link refid="dev-tools_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lazy-evaluation/lazy_expr.h</label>
        <link refid="lazy__expr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>tuple</label>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>lazy-evaluation/mkl-array.h</label>
        <link refid="mkl-array_8h_source"/>
      </node>
      <node id="2">
        <label>lazy-evaluation/lazy_array.h</label>
        <link refid="lazy__array_8h_source"/>
      </node>
      <node id="3">
        <label>lazy-evaluation/slice.h</label>
        <link refid="slice_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>lazy-evaluation/lazy_expr.h</label>
        <link refid="lazy__expr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_space_h_1_1_lazy_1_1_expr" prot="public">SpaceH::Lazy::Expr</innerclass>
    <innerclass refid="struct_space_h_1_1_lazy_1_1_unary___expr" prot="public">SpaceH::Lazy::Unary_Expr</innerclass>
    <innerclass refid="struct_space_h_1_1_lazy_1_1_binary___expr" prot="public">SpaceH::Lazy::Binary_Expr</innerclass>
    <innernamespace refid="namespace_space_h">SpaceH</innernamespace>
    <innernamespace refid="namespace_space_h_1_1_lazy">SpaceH::Lazy</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="lazy__expr_8h_1ae6a36060593a9dee5c7ed2f2853a053e" prot="public" static="no">
        <name>IS_EXPR</name>
        <param><defname>TYPE</defname></param>
        <initializer>IS_BASE_OF(Expr&lt;TYPE&gt;,TYPE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lazy-evaluation/lazy_expr.h" line="10" column="9" bodyfile="lazy-evaluation/lazy_expr.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lazy__expr_8h_1afc22057c6ded0f3a22b19d2e084687b6" prot="public" static="no">
        <name>EXPR_CREATE_UNARY_OPERATION</name>
        <param><defname>FUNC</defname></param>
        <param><defname>EXPR</defname></param>
        <initializer>auto UNIQ(OP) = [](const auto&amp; unary ) -&gt; decltype(EXPR) {return (EXPR);};                                     \
                                                                                                                       \
        template&lt;typename Unary&gt;                                                                                       \
        inline constexpr Unary_Expr&lt;decltype(UNIQ(OP)), Unary&gt;                                                         \
        FUNC(const Expr&lt;Unary&gt; &amp;unary) {                                                                               \
            return Unary_Expr&lt;decltype(UNIQ(OP)), Unary&gt;(UNIQ(OP), unary.cast());                                      \
        }                                                                                                              \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lazy-evaluation/lazy_expr.h" line="59" column="9" bodyfile="lazy-evaluation/lazy_expr.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lazy__expr_8h_1aaaa4886316abb057c851c7281a73c4e3" prot="public" static="no">
        <name>EXPR_FILTER</name>
        <param><defname>TYPE</defname></param>
        <param><defname>...</defname></param>
        <initializer>typename std::enable_if_t&lt;!IS_EXPR(TYPE), ##__VA_ARGS__&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lazy-evaluation/lazy_expr.h" line="68" column="9" bodyfile="lazy-evaluation/lazy_expr.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lazy__expr_8h_1a95072850b37b9d9f310b26f9601627cf" prot="public" static="no">
        <name>EXPR_CREATE_BINARY_OPERATION</name>
        <param><defname>FUNC</defname></param>
        <param><defname>EXPR</defname></param>
        <initializer>auto UNIQ(OP) =[](const auto &amp;lhs, const auto &amp;rhs)-&gt; decltype(EXPR) {return (EXPR);};                         \
                                                                                                                       \
        template&lt;typename Lhs, typename Rhs&gt;                                                                           \
        inline constexpr EXPR_FILTER(Lhs, Binary_Expr&lt;decltype(UNIQ(OP)), Lhs, Rhs&gt;)                                   \
        FUNC(const Lhs &amp;lhs, const Expr&lt;Rhs&gt; &amp;rhs) {                                                                   \
            return Binary_Expr&lt;decltype(UNIQ(OP)), Lhs, Rhs&gt;(UNIQ(OP), lhs, rhs.cast());                               \
        }                                                                                                              \
                                                                                                                       \
        template&lt;typename Lhs, typename Rhs&gt;                                                                           \
        inline constexpr EXPR_FILTER(Rhs, Binary_Expr&lt;decltype(UNIQ(OP)), Lhs, Rhs&gt;)                                   \
        FUNC(const Expr&lt;Lhs&gt; &amp;lhs, const Rhs &amp;rhs) {                                                                   \
            return Binary_Expr&lt;decltype(UNIQ(OP)), Lhs, Rhs&gt;(UNIQ(OP), lhs.cast(), rhs);                               \
        }                                                                                                              \
                                                                                                                       \
        template&lt;typename Lhs, typename Rhs&gt;                                                                           \
        inline constexpr Binary_Expr&lt;decltype(UNIQ(OP)), Lhs, Rhs&gt;                                                     \
        FUNC(const Expr&lt;Lhs&gt; &amp;lhs, const Expr&lt;Rhs&gt; &amp;rhs) {                                                             \
            return Binary_Expr&lt;decltype(UNIQ(OP)), Lhs, Rhs&gt;(UNIQ(OP), lhs.cast(), rhs.cast());                        \
        }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lazy-evaluation/lazy_expr.h" line="70" column="9" bodyfile="lazy-evaluation/lazy_expr.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="lazy-evaluation/lazy_expr.h"/>
  </compounddef>
</doxygen>
