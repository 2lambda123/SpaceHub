<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacespace_1_1orbit" kind="namespace" language="C++">
    <compoundname>space::orbit</compoundname>
    <innerclass refid="structspace_1_1orbit_1_1_hyper_orbit_args" prot="public">space::orbit::HyperOrbitArgs</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1_lock_random" prot="public">space::orbit::LockRandom</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1_orbit_args" prot="public">space::orbit::OrbitArgs</innerclass>
    <innerclass refid="structspace_1_1orbit_1_1_random_indicator" prot="public">space::orbit::RandomIndicator</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5" prot="public" static="no">
        <name>OrbitType</name>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5a119518c2134c46108179369f0ce81fa2" prot="public">
          <name>Ellipse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5adf5a05bb403aa376bd71f1341f8acfa6" prot="public">
          <name>Parabola</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5a2af03ca39974cae19a90cdad5a5f3230" prot="public">
          <name>Hyperbola</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5a6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="110" column="1" bodyfile="orbits/orbits.hpp" bodystart="110"
                    bodyend="112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacespace_1_1orbit_1aedf6623ebb465a158de649daaf3ed1ce" prot="public" static="no">
        <type><ref refid="structspace_1_1orbit_1_1_orbit_args" kindref="compound">OrbitArgs</ref>&lt; double &gt;</type>
        <definition>using space::orbit::Kepler = typedef OrbitArgs&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Kepler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="245" column="1" bodyfile="orbits/orbits.hpp" bodystart="245"
                    bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacespace_1_1orbit_1a4d4ef8d2eacda20e7bf213f19d8fe1f0" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structspace_1_1orbit_1_1_random_indicator" kindref="compound">space::orbit::RandomIndicator</ref></type>
        <definition>struct space::orbit::RandomIndicator  space::orbit::thermal</definition>
        <argsstring></argsstring>
        <name>thermal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="128" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacespace_1_1orbit_1a5e97a93d48049cbc0c44079083da7222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::myacos</definition>
        <argsstring>(Scalar x)</argsstring>
        <name>myacos</name>
        <param>
          <type>Scalar</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="39" column="1" bodyfile="orbits/orbits.hpp" bodystart="39"
                    bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a95676ada3e97610dea9a0260651ba437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::euler_rotate</definition>
        <argsstring>(Vector &amp;v, const Scalar phi, const Scalar theta, const Scalar psi)</argsstring>
        <name>euler_rotate</name>
        <param>
          <type>Vector &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const Scalar</type>
          <declname>psi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="44" column="1" bodyfile="orbits/orbits.hpp" bodystart="44"
                    bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a17659422e3f2634e2a33a45b76e575c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_true_anomaly</definition>
        <argsstring>(Scalar eccentric_anomaly, Scalar e)</argsstring>
        <name>calc_true_anomaly</name>
        <param>
          <type>Scalar</type>
          <declname>eccentric_anomaly</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="64" column="1" bodyfile="orbits/orbits.hpp" bodystart="64"
                    bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1aeaf980cd69ebd77a87ab2884e82a64cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_eccentric_anomaly</definition>
        <argsstring>(Scalar mean_anomaly, Scalar e)</argsstring>
        <name>calc_eccentric_anomaly</name>
        <param>
          <type>Scalar</type>
          <declname>mean_anomaly</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="91" column="1" bodyfile="orbits/orbits.hpp" bodystart="91"
                    bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ac639ca4751557b8a5dd59e452344fdc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="namespacespace_1_1orbit_1a5b218ab4c1cd5603e9dfb9e657297ff5" kindref="member">OrbitType</ref></type>
        <definition>constexpr OrbitType space::orbit::classify_orbit</definition>
        <argsstring>(T eccentricity)</argsstring>
        <name>classify_orbit</name>
        <param>
          <type>T</type>
          <declname>eccentricity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="115" column="1" bodyfile="orbits/orbits.hpp" bodystart="115"
                    bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1afd3dcc312283744b6ec15f11841db3e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::coord_to_oribt_args</definition>
        <argsstring>(Scalar m1, Scalar m2, const Vector &amp;dr, const Vector &amp;dv, OrbitArgs&lt; Scalar &gt; &amp;args)</argsstring>
        <name>coord_to_oribt_args</name>
        <param>
          <type>Scalar</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>dv</declname>
        </param>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_orbit_args" kindref="compound">OrbitArgs</ref>&lt; Scalar &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="273" column="1" bodyfile="orbits/orbits.hpp" bodystart="273"
                    bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a2255a6d1d572a1ed5314ebb9d5890840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::oribt_args_to_coord</definition>
        <argsstring>(OrbitArgs&lt; Scalar &gt; const &amp;args, Vector &amp;pos, Vector &amp;vel)</argsstring>
        <name>oribt_args_to_coord</name>
        <param>
          <type><ref refid="structspace_1_1orbit_1_1_orbit_args" kindref="compound">OrbitArgs</ref>&lt; Scalar &gt; const &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Vector &amp;</type>
          <declname>vel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="321" column="1" bodyfile="orbits/orbits.hpp" bodystart="321"
                    bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ae41962b8e0f0addde53edc56fe9171bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_to_com_coord</definition>
        <argsstring>(Particle &amp;ptc, Args &amp;... ptcs)</argsstring>
        <name>move_to_com_coord</name>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="338" column="1" bodyfile="orbits/orbits.hpp" bodystart="338"
                    bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a5f0c8fc0e79a9bb647c968231ced2e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles_to</definition>
        <argsstring>(Vector const &amp;centre_mass_pos, Vector const &amp;centre_mass_vel, Particle &amp;ptc, Args &amp;... ptcs)</argsstring>
        <name>move_particles_to</name>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_pos</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>centre_mass_vel</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="372" column="1" bodyfile="orbits/orbits.hpp" bodystart="372"
                    bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a2fe00383192f08f48719d8b842625d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void space::orbit::move_particles_to</definition>
        <argsstring>(Kepler const &amp;args, Particle &amp;ptc, Args &amp;... ptcs)</argsstring>
        <name>move_particles_to</name>
        <param>
          <type><ref refid="namespacespace_1_1orbit_1aedf6623ebb465a158de649daaf3ed1ce" kindref="member">Kepler</ref> const &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>Particle &amp;</type>
          <declname>ptc</declname>
        </param>
        <param>
          <type>Args &amp;...</type>
          <declname>ptcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="391" column="1" bodyfile="orbits/orbits.hpp" bodystart="391"
                    bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1afe2f5846e68cbd436925e553686533ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto space::orbit::semi_latus_rectum</definition>
        <argsstring>(Scalar a, Scalar e)</argsstring>
        <name>semi_latus_rectum</name>
        <param>
          <type>Scalar</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="399" column="1" bodyfile="orbits/orbits.hpp" bodystart="399"
                    bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1af559e3bfe01ebd1ea5b0b7cf91d9a1b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_eccentricity</definition>
        <argsstring>(Scalar u, Vector const &amp;dr, Vector const &amp;dv)</argsstring>
        <name>calc_eccentricity</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="404" column="1" bodyfile="orbits/orbits.hpp" bodystart="404"
                    bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a4e547b3a0a6d5133eb38c6548172c867" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_eccentricity</definition>
        <argsstring>(Scalar u, Scalar dx, Scalar dy, Scalar dz, Scalar dvx, Scalar dvy, Scalar dvz)</argsstring>
        <name>calc_eccentricity</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="409" column="1" bodyfile="orbits/orbits.hpp" bodystart="409"
                    bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1af6241336b276c04f77ceff7c7932d0f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_eccentricity</definition>
        <argsstring>(Particle const &amp;p1, Particle const &amp;p2)</argsstring>
        <name>calc_eccentricity</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="415" column="1" bodyfile="orbits/orbits.hpp" bodystart="415"
                    bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ac766a365db0f96da95764a569ca27810" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_semi_major_axis</definition>
        <argsstring>(Scalar u, Vector const &amp;dr, Vector const &amp;dv)</argsstring>
        <name>calc_semi_major_axis</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="420" column="1" bodyfile="orbits/orbits.hpp" bodystart="420"
                    bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a1b58851ecb7a98faaaef30f809b08362" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>Scalar</type>
        <definition>Scalar space::orbit::calc_semi_major_axis</definition>
        <argsstring>(Scalar u, Scalar dx, Scalar dy, Scalar dz, Scalar dvx, Scalar dvy, Scalar dvz)</argsstring>
        <name>calc_semi_major_axis</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="426" column="1" bodyfile="orbits/orbits.hpp" bodystart="426"
                    bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ad47e2359941431cfd7af5a0a64cc1f78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_semi_major_axis</definition>
        <argsstring>(Particle const &amp;p1, Particle const &amp;p2)</argsstring>
        <name>calc_semi_major_axis</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="432" column="1" bodyfile="orbits/orbits.hpp" bodystart="432"
                    bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1adb8a9f565c97cb198ec36ae657b9efe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Vector</type>
          </param>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_a_e</definition>
        <argsstring>(Scalar u, Vector const &amp;dr, Vector const &amp;dv)</argsstring>
        <name>calc_a_e</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Vector const &amp;</type>
          <declname>dv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="437" column="1" bodyfile="orbits/orbits.hpp" bodystart="437"
                    bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1ab429eb4e43b25ce8ad7bd0b53d502ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_a_e</definition>
        <argsstring>(Scalar u, Scalar dx, Scalar dy, Scalar dz, Scalar dvx, Scalar dvy, Scalar dvz)</argsstring>
        <name>calc_a_e</name>
        <param>
          <type>Scalar</type>
          <declname>u</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvx</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvy</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>dvz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="449" column="1" bodyfile="orbits/orbits.hpp" bodystart="449"
                    bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a0188ecf5ffad7fe2a972b1efd13d57c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_a_e</definition>
        <argsstring>(Particle const &amp;p1, Particle const &amp;p2)</argsstring>
        <name>calc_a_e</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="455" column="1" bodyfile="orbits/orbits.hpp" bodystart="455"
                    bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a7d42477cca9ad77ca08f3d266ce3f66b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_period</definition>
        <argsstring>(Scalar m1, Scalar m2, Scalar a)</argsstring>
        <name>calc_period</name>
        <param>
          <type>Scalar</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>Scalar</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="460" column="1" bodyfile="orbits/orbits.hpp" bodystart="460"
                    bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a77c1590a7bfeb4d3df6f9c4ef3a9ff61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto space::orbit::calc_period</definition>
        <argsstring>(Kepler const &amp;args)</argsstring>
        <name>calc_period</name>
        <param>
          <type><ref refid="namespacespace_1_1orbit_1aedf6623ebb465a158de649daaf3ed1ce" kindref="member">Kepler</ref> const &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="468" column="1" bodyfile="orbits/orbits.hpp" bodystart="468"
                    bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1acfe9abfa163bae45e9165c5af93c64e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::calc_period</definition>
        <argsstring>(Particle const &amp;p1, Particle const &amp;p2)</argsstring>
        <name>calc_period</name>
        <param>
          <type>Particle const &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>Particle const &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="471" column="1" bodyfile="orbits/orbits.hpp" bodystart="471"
                    bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespacespace_1_1orbit_1a175e58f69dd07bee0ffc3adaba9a1796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Particle</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto space::orbit::total_mass</definition>
        <argsstring>(Particle &amp;&amp;ptc, Args &amp;&amp;... args)</argsstring>
        <name>total_mass</name>
        <param>
          <type>Particle &amp;&amp;</type>
          <declname>ptc</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
          <location file="orbits/orbits.hpp" line="476" column="1" bodyfile="orbits/orbits.hpp" bodystart="476"
                    bodyend="488"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Documentation for space </para>    </detaileddescription>
      <location file="orbits/orbits.hpp" line="33" column="1"/>
  </compounddef>
</doxygen>
