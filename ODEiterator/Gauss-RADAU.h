
#ifndef GAUSSRADAU_H
#define GAUSSRADAU_H
#include "PredictorCorrector.h"

namespace SpaceH
{
   
    namespace Radau
    {
        /** Gauss radau stepping. see details in
         https://www.cambridge.org/core/journals/international-astronomical-union-colloquium/article/an-efficient-integrator-that-uses-gauss-radau-spacings/F942BC9121C74CC2FA296050FC18D824
         */
        
        
        // all const computation here need to be rewrite with template metaprogramming
        
        constexpr double H[8] = {0, 0.05626256053692215, 0.18024069173689236, 0.35262471711316964, 0.54715362633055538, 0.73421017721541053, 0.88532094683909577, 0.97752061356128750};
        
        /*constexpr double c[21] =
         {
         -0.05626256053692215,
         0.01014080283006363, -0.23650325227381452,
         -0.00357589772925162,  0.09353769525946207, -0.58912796938698420,
         0.00195656540994722, -0.05475538688906869,  0.41588120008230689, -1.13628159571753962,
         -0.00143653023637089,  0.04215852772126871, -0.36009959650205681,  1.25015071184069093, -1.87049177293294999,
         0.00127179030902687, -0.03876035791590677,  0.36096224345284600, -1.46688420840042699,  2.90613625930842900, -2.75581271977204567
         };*/
        
        constexpr double c[21] =
        {
            -0.05626256053692215,  0.01014080283006363, -0.00357589772925162,  0.00195656540994722, -0.00143653023637089,  0.00127179030902687,
            -0.23650325227381452,  0.09353769525946207, -0.05475538688906869,  0.04215852772126871, -0.03876035791590677,
            -0.58912796938698420,  0.41588120008230689, -0.36009959650205681,  0.36096224345284600,
            -1.13628159571753962,  1.25015071184069093, -1.46688420840042699,
            -1.87049177293294999,  2.90613625930842900,
            -2.75581271977204567
        };
        
        /*constexpr double d[21] =
         {
         0.05626256053692215,
         0.00316547571817083, 0.23650325227381452,
         0.00017809776922174, 0.04579298550602792, 0.58912796938698420,
         0.00001002023652233, 0.00843185715352570, 0.25353406905456927, 1.13628159571753962,
         0.00000056376416393, 0.00152978400250047, 0.09783423653244401, 0.87525466468409108, 1.87049177293294999,
         0.00000003171881540, 0.00027629309098265, 0.03602855398373646, 0.57673300027707874, 2.24858876076915948, 2.75581271977204567
         };*/
        
        constexpr double d[21] =
        {
            0.05626256053692215, 0.00316547571817083, 0.00017809776922174, 0.00001002023652233, 0.00000056376416393, 0.00000003171881540,
            0.23650325227381452, 0.04579298550602792, 0.00843185715352570, 0.00152978400250047, 0.00027629309098265,
            0.58912796938698420, 0.25353406905456927, 0.09783423653244401, 0.03602855398373646,
            1.13628159571753962, 0.87525466468409108, 0.57673300027707874,
            1.87049177293294999, 2.24858876076915948,
            2.75581271977204567
        };
        
        /*constexpr double r[28] =
         {
         17.77380891407799979,
         5.54813671853721679, 8.06593864838188779,
         2.83587607864443880, 3.37424997696263551, 5.80100155926406202,
         1.82764026751759778, 2.03711183535858442, 2.72544221180822621, 5.14062410581093232,
         1.36200781606246957, 1.47504021756041159, 1.80515358014025140, 2.62064492638703506, 5.34597689987110947,
         1.12953387533678984, 1.20618766605844563, 1.41827826373473909, 1.87724249618681016, 2.95711601729045581, 6.61766201370242158,
         1.02299632982348676, 1.08547219393864247, 1.25426462228187785, 1.60026654949081615, 2.32359830021969449, 4.10997577834455807, 10.84602619023684689
         };*/
        
        constexpr double r[28] =
        {
            17.77380891407799979, 5.54813671853721679, 2.83587607864443880, 1.82764026751759778, 1.36200781606246957, 1.12953387533678984, 1.02299632982348676,
            8.06593864838188779, 3.37424997696263551, 2.03711183535858442, 1.47504021756041159, 1.20618766605844563, 1.08547219393864247,
            5.80100155926406202, 2.72544221180822621, 1.80515358014025140, 1.41827826373473909, 1.25426462228187785,
            5.14062410581093232, 2.62064492638703506, 1.87724249618681016, 1.60026654949081615,
            5.34597689987110947, 2.95711601729045581, 2.32359830021969449,
            6.61766201370242158, 4.10997577834455807,
            10.84602619023684689
        };
        
        constexpr double VC[7][7] =
        {
            {1.58273785908541486e-03, 5.93659230739144767e-05, 2.50505913058228235e-06, 1.12752832786364176e-07, 5.28646923362689616e-09, 2.54940253100151162e-10, 1.25506424954273203e-11},
            {1.62433534788967299e-02, 1.95180884477546917e-03, 2.63846532240386510e-04, 3.80447051867100280e-05, 5.71433664981562659e-06, 8.82819420497352521e-07, 1.39229985150554609e-07},
            {6.21720955595714483e-02, 1.46156117393512197e-02, 3.86536946626848347e-03, 1.09041985166464595e-03, 3.20424159773191781e-04, 9.68481245967829830e-05, 2.98821622215214056e-05},
            {1.49688545403338535e-01, 5.46017536250551147e-02, 2.24066606249673402e-02, 9.80790849192715933e-03, 4.47202724839682909e-03, 2.09733079372232626e-03, 1.00411688072492376e-03},
            {2.69532292163342235e-01, 1.31928901329682186e-01, 7.26476565188252793e-02, 4.26709190135767871e-02, 2.61078525090855350e-02, 1.64302723006367057e-02, 1.05553639953544359e-02},
            {3.91896589456036559e-01, 2.31302839760153783e-01, 1.53582936827273253e-01, 1.08776152840200480e-01, 8.02515055216670714e-02, 6.08985761603187542e-02, 4.71754369689804109e-02},
            {4.77773274968617989e-01, 3.11355483260339461e-01, 2.28267302274238665e-01, 1.78508794700074913e-01, 1.45413355434419272e-01, 1.21838187792222094e-01, 1.04211922575117272e-01}
        }
        
        constexpr double PC[7][7] =
        {
            {2.96829615369572383e-05, 8.35019710194094082e-07, 2.81882081965910440e-08, 1.05729384672537927e-09, 4.24900421833585270e-11, 1.79294892791818853e-12, 7.84590314640274775e-14},
            {9.75904422387734584e-04, 8.79488440801288367e-05, 9.51117629667750701e-06, 1.14286732996312544e-06, 1.47136570082892105e-07, 1.98899978786506594e-08, 2.78832320378369031e-09},
            {7.30780586967560986e-03, 1.28845648875616108e-03, 2.72604962916161487e-04, 6.40848319546383509e-05, 1.61413540994638316e-05, 4.26888031736020116e-06, 1.17079877778820332e-06},
            {2.73008768125275574e-02, 7.46888687498911338e-03, 2.45197712298178983e-03, 8.94405449679365819e-04, 3.49555132287054341e-04, 1.43445268674989096e-04, 6.10451325053741953e-05},
            {6.59644506648410928e-02, 2.42158855062750943e-02, 1.06677297533941968e-02, 5.22157050181710700e-03, 2.73837871677278443e-03, 1.50790914219349091e-03, 8.61095074400260456e-04},
            {1.15651419880076892e-01, 5.11943122757577487e-02, 2.71940382100501199e-02, 1.60503011043334129e-02, 1.01497626933864590e-02, 6.73934813842577262e-03, 4.64060028054731274e-03},
            {1.55677741630169730e-01, 7.60891007580795503e-02, 4.46271986750187283e-02, 2.90826710868838552e-02, 2.03063646320370168e-02, 1.48874175107310391e-02, 1.13188113884477790e-02},
        }
        
        template<typename ScalarArray>
        inline void transB2G(ScalarArray& B, ScalarArray& G)
        {
            B[0] = G[0] + c[0]*G[1] + c[1]*G[2] + c[2] *G[3] + c[3] *G[4] + c[4] *G[5] + c[5] *G[6];
            B[1] =             G[1] + c[6]*G[2] + c[7] *G[3] + c[8] *G[4] + c[9] *G[5] + c[10]*G[6];
            B[2] =                         G[2] + c[11]*G[3] + c[12]*G[4] + c[13]*G[5] + c[14]*G[6];
            B[3] =                                      G[3] + c[15]*G[4] + c[16]*G[5] + c[17]*G[6];
            B[4] =                                                   G[4] + c[18]*G[5] + c[19]*G[6];
            B[5] =                                                                G[5] + c[20]*G[6];
            B[6] =                                                                             G[6];
        }
        
        template<typename ScalarArray>
        inline void transG2B(ScalarArray& G, ScalarArray& B)
        {
            G[0] = B[0] + c[0]*B[1] + c[1]*B[2] + c[2] *B[3] + c[3] *B[4] + c[4] *B[5] + c[5] *B[6];
            G[1] =             B[1] + c[6]*B[2] + c[7] *B[3] + c[8] *B[4] + c[9] *B[5] + c[10]*B[6];
            G[2] =                         B[2] + c[11]*B[3] + c[12]*B[4] + c[13]*B[5] + c[14]*B[6];
            G[3] =                                      B[3] + c[15]*B[4] + c[16]*B[5] + c[17]*B[6];
            G[4] =                                                   B[4] + c[18]*B[5] + c[19]*B[6];
            G[5] =                                                                B[5] + c[20]*B[6];
            G[6] =                                                                             B[6];
        }
        
        double velTaylorCoef(double h, size_t index)//make it const later
        {
            double var = 1;
            size_t order = index + 2;
            for(size_t i = 0 ; i < order; ++i)
                var*=h;
            
            return var/order;
        }
        
        double posTaylorCoef(double h, size_t index)//make it const later
        {
            double var = 1;
            size_t order = index + 3
            for(size_t i = 0 ; i < order; ++i)
                var*=h;
            
            return var/(order*(order-1));
        }
    }
    
    /** @brief Gauss RADAU iterator
     *
     */
    template <typename ParticSys, typename Integrator>
    class GaussRadau
    {
    public:
        /* Typedef */
        using type = typename ParticSys::type
        using Scalar = typename type::Scalar;
        using Vector = typename type::Vector;
        using VectorArray = typename type::VectorArray;
        using ScalarBuffer = typename type::ScalarBuffer;
        
        template<typename T, size_t S>
        using Container = typename type::template Container<T, S>;
        
        using RadauArray = Container<Vector,7>;
        using RadauTab = Contanier<RadauArray, ParticSys::arraySize>;
        /* Typedef */
        
        /*Template parameter check*/
        CHECK_TYPE(ParticSys, Integrator)
        /*Template parameter check*/
        
        /** @brief interface to iterate particle system for one step
         *  @param particles  Particle system needs evolution.
         *  @param integrator Integrator to integrate the particle system.
         *  @param stepLength Macro step length for iteration(Here, the step length of the integrator).
         *  @return step length for next iteration.
         */
        Scalar iterate(ParticSys& particles, Integrator& integrator, Scalar stepLength)
        {
            checkCofTab(particles.particleNumber());
            setMicroH(stepLength);
        }
        
        
        GaussRadau()
        {
            
            
        }
        
    private:
        
        inline setMicroH(Scalr stepLength)
        {
            for(size_t i = 0 ; i < 7; ++i)
            {
                microH[i] = stepLength*Radau[i];
            }
        }
        
        void checkCofTab(size_t particleNum)
        {
            if(particleNum_ < particleNum)
            {
                cofBTab_.resize(particleNum);
                cofGTab_.resize(particleNum);
                particleNum_ = particleNum;
            }
        }
        
        void calcuVel(VectorArray& vel0, VectorArray& acc0 Scalar StepSize, size_t step)
        {
            size_t size = vel0.size();
            Scalar h = Radau::H[step];
            for(size_t i = 0 ; i < size; ++i)
            {
                this->eva_vel[i] = vel0[i] + (cofBtab_[i][0]*VC[i][0] + cofBtab_[i][0]*VC[i][0] + cofBtab_[i][0]*VC[i][0] + cofBtab_[i][0]*VC[i][0]
                                           +  cofBtab_[i][0]*VC[i][0] + cofBtab_[i][0]*VC[i][0] + cofBtab_[i][0]*VC[i][0])*stepSize;
            }
        }
        
        void calcuPos(VectorArray& pos0, VectorArray& vel0, VectorArray& acc0, Scalar StepSize, size_t step)
        {
            size_t size = pos0.size();
            Scalar h = Radau::H[step];
            for(size_t i = 0 ; i < size; ++i)
            {
                this->eva_pos[i] = pos0[i] + (cofBtab_[i][0]*PC[i][0] + cofBtab_[i][0]*PC[i][0] + cofBtab_[i][0]*PC[i][0] + cofBtab_[i][0]*PC[i][0]
                                           +  cofBtab_[i][0]*PC[i][0] + cofBtab_[i][0]*PC[i][0] + cofBtab_[i][0]*PC[i][0])*stepSize*stepSize;
            }
        }
    private:
        RadauTab    cofBtab_;
        RadauTab    cofGtab_;
        VectorArray eva_pos_;
        VectorArray eva_vel_;
        VectorArray eva_acc_;
        Scalar      microH_[7];
        size_t      particleNum_{0};
    };

}
#endif
